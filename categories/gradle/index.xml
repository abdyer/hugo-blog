<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gradle on Andy Dyer</title>
    <link>http://andydyer.org/categories/gradle/</link>
    <description>Recent content in Gradle on Andy Dyer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2015 Copyright Andy Dyer</copyright>
    <lastBuildDate>Thu, 22 Jan 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://andydyer.org/categories/gradle/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Running Shell Commands with Gradle and a Better Way to Delombok</title>
      <link>http://andydyer.org/blog/2015/01/22/running-shell-commands-with-gradle-and-a-better-way-to-delombok/</link>
      <pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://andydyer.org/blog/2015/01/22/running-shell-commands-with-gradle-and-a-better-way-to-delombok/</guid>
      <description>&lt;p&gt;A few months ago, I &lt;a href=&#34;http://andydyer.org/blog/2014/09/29/delombok-and-javadoc-with-gradle/&#34;&gt;posted&lt;/a&gt; about how to use Gradle tasks to &amp;ldquo;&lt;a href=&#34;http://projectlombok.org/features/delombok.html&#34;&gt;delombok&lt;/a&gt;&amp;rdquo; code using Lombok annotations before generating Javadocs. My solution for running the delombok task used Ant and was based on what I found after the requisite Google &amp;amp; StackOverflow searching. This worked just fine until Android Studio 1.0 and the associated Gradle build tools were released at the end of the year.&lt;/p&gt;

&lt;p&gt;The crux of the problem appeared to be a change in the way dependencies are merged during compilation. Countless &amp;ldquo;package does not exist errors&amp;rdquo; were causing the delombok task to fail. I first attempted to solve this by changing the way the classpath was built in the task. While I was able to reduce the number of errors, I didn&amp;rsquo;t succeed in completely fixing the problem. All the while, running the delombok task directly from the command line with &lt;code&gt;java -jar build-libs/lombok.jar delombok src -d build/src-delomboked&lt;/code&gt; ran successfully.&lt;/p&gt;

&lt;p&gt;Eventually, I decided to &lt;a href=&#34;http://c2.com/xp/DoTheSimplestThingThatCouldPossiblyWork.html&#34;&gt;do the simplest thing that could possibly work&lt;/a&gt;. This led me to learning how to use the &lt;a href=&#34;http://www.gradle.org/docs/current/dsl/org.gradle.api.tasks.Exec.html&#34;&gt;Exec&lt;/a&gt; command to run shell commands with Gradle tasks. The end result is below. It&amp;rsquo;s much more succinct and no longer subject to changes in Android Studio&amp;rsquo;s build process. The only non-obvious thing is that each part of the command must be quoted separately and comma-delimited.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;task delombok(type: Exec) {
    commandLine &#39;java&#39;, &#39;-jar&#39;, &#39;build-libs/lombok.jar&#39;, &#39;delombok&#39;, &#39;src&#39;, &#39;-d&#39;, &#39;build/src-delomboked&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I hope this saves someone some time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hosting Android Dependencies on GitHub</title>
      <link>http://andydyer.org/blog/2014/10/05/hosting-android-dependencies-on-github/</link>
      <pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://andydyer.org/blog/2014/10/05/hosting-android-dependencies-on-github/</guid>
      <description>&lt;p&gt;As I mentioned in my &lt;a href=&#34;http://andydyer.org/blog/2014/09/29/delombok-and-javadoc-with-gradle/&#34;&gt;last post&lt;/a&gt;, I&amp;rsquo;m developing an SDK at work. The libraries I use most frequently in my apps are all included as Maven dependencies. Adding a line to my &lt;code&gt;build.gradle&lt;/code&gt; file is much preferred to downloading a JAR file. To make the SDK as easy as possible for developers to include in their projects, I wanted to deliver it the same way.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://central.sonatype.org/&#34;&gt;Maven Central&lt;/a&gt; is the de facto repository for open source library hosting. Since the SDK I&amp;rsquo;m developing is part of a product and as such will not be open source, I needed to find another place to host the binary that would still allow it to be included via Maven.&lt;/p&gt;

&lt;p&gt;Libraries hosted on Maven Central are included in &lt;code&gt;build.gradle&lt;/code&gt;with the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;repositories {
    mavenCentral()
}

dependencies {
    compile &#39;com.squareup.retrofit:retrofit:1.6.1&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Including another Maven source is as simple as adding its URL to the &lt;code&gt;repositories&lt;/code&gt; block and then including the group/artifact/version string as normal in the &lt;code&gt;dependencies&lt;/code&gt; block:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;repositories {
    mavenCentral()
    maven { url &amp;quot;https://raw.github.com/username/my-super-cool-sdk/master&amp;quot; }
}

dependencies {
    compile &#39;com.squareup.retrofit:retrofit:1.6.1&#39;
    compile &#39;com.username:my-super-cool-sdk:1.0.0&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But how do we actually prepare a library for Maven? This can be done in Gradle with the Maven plugin:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;apply plugin: &#39;maven&#39;

uploadArchives {
    repositories.mavenDeployer {
        def deployPath = file(getProperty(&#39;aar.deployPath&#39;))
        repository(url: &amp;quot;file://${deployPath.absolutePath}&amp;quot;)
        pom.project {
            groupId &#39;com.username&#39;
            artifactId &#39;my-super-cool-sdk&#39;
            version &amp;quot;1.0.0&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing to note is the call to &lt;code&gt;getProperty(&#39;aar.deployPath&#39;)&lt;/code&gt; above. This reads the value of the &lt;code&gt;aar.deployPath&lt;/code&gt; property in my &lt;code&gt;gradle.properties&lt;/code&gt; file. The library project is in a separate GitHub repository from the one where the SDK binary is hosted, so the deploy path property provides the relative path to the local destination directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;aar.deployPath=../../../../my-super-cool-sdk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once everything is in place, running &lt;code&gt;gradle uploadArchives&lt;/code&gt; exports the AAR binary and necessary POM/XML files to the target directory. From there, all that&amp;rsquo;s left to do is commit the files and push them to the SDK repository on GitHub.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Delombok and Javadoc with Gradle</title>
      <link>http://andydyer.org/blog/2014/09/29/delombok-and-javadoc-with-gradle/</link>
      <pubDate>Mon, 29 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://andydyer.org/blog/2014/09/29/delombok-and-javadoc-with-gradle/</guid>
      <description>&lt;p&gt;I recently had my first experience working with Javadoc to generate documentation for an SDK I&amp;rsquo;ve been developing at work. In general, I&amp;rsquo;m in the &amp;ldquo;&lt;a href=&#34;http://blog.codinghorror.com/coding-without-comments/&#34;&gt;clean code doesn&amp;rsquo;t need comments&lt;/a&gt;&amp;rdquo; camp, but SDKs tend to be a limited view into a larger abstraction, so good documentation is a necessity.&lt;/p&gt;

&lt;p&gt;Javadoc has been around since the introduction of the Java language, so I won&amp;rsquo;t include a primer here. If you want to learn more, &lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/documentation/javadoc-137458.html&#34;&gt;Oracle has you covered&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After adding the necessary documentation comments to the public-facing portions of the SDK, I naturally wanted a Gradle task to easily generate the documentation. The following will add tasks to generate Javadocs for each build type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;android.libraryVariants.all { variant -&amp;gt;
    task(&amp;quot;generate${variant.name.capitalize()}Javadoc&amp;quot;, type: Javadoc) {
        description &amp;quot;Generates Javadoc for $variant.name.&amp;quot;
        source = &#39;src/main/java&#39;
        ext.androidJar = &amp;quot;${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar&amp;quot;
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        options.links(&amp;quot;http://docs.oracle.com/javase/7/docs/api/&amp;quot;);
        options.links(&amp;quot;http://d.android.com/reference/&amp;quot;);

        // exclude generated files
        exclude &#39;**/BuildConfig.java&#39;
        exclude &#39;**/R.java&#39;

        // exclude any internal packages
        exclude &#39;**/com/acme/sdk/api/**&#39;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After adding the above to your &lt;code&gt;build.gradle&lt;/code&gt; file, generate your Javadocs from the command line with &lt;code&gt;gradle generateReleaseJavadoc&lt;/code&gt;. If you&amp;rsquo;re not using any annotation libraries to generate the mundane/boilerplate code in your application, this should be all you need. However, I highly recommend exploring how you can take advantage of some of these libraries.&lt;/p&gt;

&lt;p&gt;An annotation library I use in almost every project is &lt;a href=&#34;http://projectlombok.org/&#34;&gt;Lombok&lt;/a&gt;. Be forewarned that the unappealing web site belies the power of this library. As you can see from the &lt;a href=&#34;http://projectlombok.org/features/index.html&#34;&gt;feature list&lt;/a&gt;, it includes annotations for generating getters/setters, null checks, and much more. You&amp;rsquo;ll want to install the &lt;a href=&#34;http://plugins.jetbrains.com/plugin/6317&#34;&gt;Lombok Plugin&lt;/a&gt; for IntelliJ to eliminate misleading syntax errors when using these annotations in Android Studio.&lt;/p&gt;

&lt;p&gt;Assuming I&amp;rsquo;ve convinced you to try Lombok, you&amp;rsquo;ll eventually find that Javadoc comments on &lt;code&gt;@Getter&lt;/code&gt; annotated fields are missing in the generated documentation. This is because the annotated code is replaced with the generated code during compliation and Javadoc is run against the compiled code.&lt;/p&gt;

&lt;p&gt;To fix this, we need to &amp;ldquo;&lt;a href=&#34;http://projectlombok.org/features/delombok.html&#34;&gt;delombok&lt;/a&gt;&amp;rdquo; our code before running Javadoc on it. This involves running the &lt;code&gt;delombok&lt;/code&gt; command on the original source, copying the resulting code into a separate directory, and then running Javadoc on the delomboked directory. With Gradle, this is most easily done by adding a dependent delombok task to the Javadoc task above.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll also need to include &lt;code&gt;lombok.jar&lt;/code&gt; in your &lt;code&gt;libs&lt;/code&gt; directory in order to run the &lt;code&gt;delombok&lt;/code&gt; command. I include the Lombok library in my project via a Gradle dependency, but the task didn&amp;rsquo;t seem to find the command without the JAR file. I don&amp;rsquo;t have any other JAR files in my &lt;code&gt;libs&lt;/code&gt; directory and don&amp;rsquo;t include it in my build, so this was a pretty easy workaround. You can certainly put the JAR in another directory within your project and change the classpath in the task if needed.&lt;/p&gt;

&lt;p&gt;Once this has been done, the complete script is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;def srcJava = &#39;src/main/java&#39;
def srcDelomboked = &#39;build/src-delomboked/main/java&#39;

task delombok {
    inputs.files file(srcJava)
    outputs.dir file(srcDelomboked)

    doLast {
        FileCollection collection = files(configurations.compile)
        FileCollection sumTree = collection + fileTree(dir: &#39;bin&#39;)

        ant.taskdef(name: &#39;delombok&#39;, classname: &#39;lombok.delombok.ant.DelombokTask&#39;, classpath: &#39;libs/lombok.jar&#39;)
        ant.delombok(from:srcJava, to:srcDelomboked, classpath: sumTree.asPath)
    }
}

android.libraryVariants.all { variant -&amp;gt;
    task(&amp;quot;generate${variant.name.capitalize()}Javadoc&amp;quot;, type: Javadoc) {
        description &amp;quot;Generates Javadoc for $variant.name.&amp;quot;
        setDependsOn([&#39;delombok&#39;])
        source = srcDelomboked
        ext.androidJar = &amp;quot;${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar&amp;quot;
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        options.links(&amp;quot;http://docs.oracle.com/javase/7/docs/api/&amp;quot;);
        options.links(&amp;quot;http://d.android.com/reference/&amp;quot;);

        // exclude generated files
        exclude &#39;**/BuildConfig.java&#39;
        exclude &#39;**/R.java&#39;

        // exclude any internal packages
        exclude &#39;**/com/acme/sdk/api/**&#39;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running &lt;code&gt;gradle generateReleaseJavadoc&lt;/code&gt; will now delombok your code and then run Javadoc on the output.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>