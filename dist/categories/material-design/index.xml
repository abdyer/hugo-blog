<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Material Design on Andy Dyer</title>
    <link>http://andydyer.org/categories/material-design/</link>
    <description>Recent content in Material Design on Andy Dyer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2015 Copyright Andy Dyer</copyright>
    <lastBuildDate>Sun, 28 Jun 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://andydyer.org/categories/material-design/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using a Third Party FAB with CoordinatorLayout</title>
      <link>http://andydyer.org/blog/2015/06/28/using-a-third-party-fab-with-coordinatorlayout/</link>
      <pubDate>Sun, 28 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://andydyer.org/blog/2015/06/28/using-a-third-party-fab-with-coordinatorlayout/</guid>
      <description>&lt;p&gt;Before the Design Support Library was announced at Google I/O last month, I had numerous third party libraries in my projects for various elements of Material Design. I&amp;rsquo;ve enjoyed replacing the nav drawer, tabs, and parallax scrolling libraries with their support library counterparts. However, on one of my projects, we needed an expanding floating action button (FAB) similar to the one in &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.google.android.apps.inbox&#34;&gt;Inbox&lt;/a&gt;, which the support library does not currently provide.&lt;/p&gt;

&lt;p&gt;I chose &lt;a href=&#34;https://github.com/futuresimple/android-floating-action-button&#34;&gt;this&lt;/a&gt; FAB library since it includes a cool little animation from the plus sign to the &amp;ldquo;X&amp;rdquo; when expanding the menu. I foolishly thought I could just drop this into a CoordinatorLayout in place of the support library&amp;rsquo;s FAB. If you&amp;rsquo;ve checked out Chris Banes&amp;rsquo; excellent &lt;a href=&#34;https://github.com/chrisbanes/cheesesquare&#34;&gt;Cheesesquare&lt;/a&gt; sample, you might have noticed the &lt;code&gt;app:layout_anchor&lt;/code&gt; and &lt;code&gt;app:layout_anchorGravity&lt;/code&gt; attributes defined on the &lt;code&gt;FloatingActionButton&lt;/code&gt; element:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;android.support.design.widget.FloatingActionButton
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:layout_width=&amp;quot;wrap_content&amp;quot;
        app:layout_anchor=&amp;quot;@id/appbar&amp;quot;
        app:layout_anchorGravity=&amp;quot;bottom|right|end&amp;quot;
        android:src=&amp;quot;@drawable/ic_discuss&amp;quot;
        android:layout_margin=&amp;quot;@dimen/fab_margin&amp;quot;
        android:clickable=&amp;quot;true&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These two attributes are what tells the enclosing &lt;code&gt;CoordinatorLayout&lt;/code&gt; how to position the button and how it should behave when scrolling. To investigate how they are used, I used the good ol&amp;rsquo; &lt;code&gt;⌘+B&lt;/code&gt; shortcut to go to the &lt;code&gt;FloatingActionButton&lt;/code&gt;&amp;rsquo;s class definition. While the support library is not open source, I was still able to view the decompiled source.&lt;/p&gt;

&lt;p&gt;The first thing I noticed is the &lt;code&gt;@DefaultBehavior(FloatingActionButton.Behavior.class)&lt;/code&gt; annotation at the top of the class. The &lt;code&gt;FloatingActionButton.Behavior&lt;/code&gt; child class provides the &lt;code&gt;Behavior&lt;/code&gt; implementation used by &lt;code&gt;CoordinatorLayout&lt;/code&gt;. I copied and pasted this inner class into my own subclass of the third party library&amp;rsquo;s &lt;code&gt;FloatingActionsMenu&lt;/code&gt; class, updated the generic type, and started resolving the compile errors. It didn&amp;rsquo;t take me long to realize that several package private classes and methods were being called in this code. There are two ways to solve this. One is to copy the decompiled source of these classes into my project, but there is still the &lt;code&gt;AppBarLayout&lt;/code&gt;&amp;rsquo;s package private &lt;code&gt;getMinimumHeightForVisibleOverlappingContent()&lt;/code&gt; method to deal with. A simpler, yet slightly hackish way to handle this is to just define our class in a &lt;code&gt;android.support.design.widget&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;The last issue specific to this library is that its measured height includes its children, so the FAB is not correctly positioned on the edge of the image and content views. After a bit of experimentation, I solved this by overriding &lt;code&gt;onMeasure()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Override
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
    super.onMeasure(widthMeasureSpec, heightMeasureSpec);
    // measured height includes child views, so translate Y to align FAB on view edges
    if (getTranslationY() == 0) {
        View fab = getChildAt(getChildCount() - 1); // last child is the FAB
        int shadowRadius = getResources().getDimensionPixelSize(R.dimen.fab_shadow_radius);
        int offset = (getMeasuredHeight() - fab.getMeasuredHeight() + shadowRadius) / 2;
        ViewCompat.setTranslationY(this, offset);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/abdyer/cheesesquare/blob/master/app/src/main/java/android/support/design/widget/SupportFloatingActionsMenu.java&#34;&gt;source&lt;/a&gt; for &lt;code&gt;SupportFloatingActionsMenu&lt;/code&gt; is on GitHub in &lt;a href=&#34;https://github.com/abdyer/cheesesquare&#34;&gt;my Cheesesquare fork&lt;/a&gt;. Hopefully we&amp;rsquo;ll see first class support for integrating alternate FAB implementations more cleanly with the support library soon.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a screen shot of the end result:&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://andydyer.org/images/cheesesquare_fab_menu.png&#34; alt=&#34;Cheesesquare FAB menu&#34; style=&#34;width: 405px; margin-left: auto; margin-right: auto; display: block&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Music Library 3.0 - Material Design Update</title>
      <link>http://andydyer.org/blog/2014/11/02/music-library-3.0---material-design-update/</link>
      <pubDate>Sun, 02 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://andydyer.org/blog/2014/11/02/music-library-3.0---material-design-update/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://andydyer.org/images/music_library_icon.png&#34; alt=&#34;Music Library&#34; style=&#34;width: 150px; float: left; margin-right: 20px&#34; /&gt;
I started developing &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.dandydev.medialibrary&#34;&gt;Music Library&lt;/a&gt; about four years ago when I wanted an app for organizing my record collection. Armed with my Nexus One, Eclipse, and a copy of Apress&amp;rsquo; &lt;a href=&#34;http://www.amazon.com/gp/product/1430246804/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1430246804&amp;amp;linkCode=as2&amp;amp;tag=slacod-20&amp;amp;linkId=FMLK73AOGDPPJEM3&#34;&gt;Pro Android&lt;/a&gt;, I spent my nights and weekends learning the inner workings of my now-favorite mobile OS.&lt;/p&gt;

&lt;p&gt;Over the years, Music Library has been a playground of sorts for exploring various open source libraries, patterns, and best practices. While there is still a fair amount of code I would write differently today (I&amp;rsquo;m looking at you, ContentProvider), the app has been and continues to be an enjoyable side project.&lt;/p&gt;

&lt;p&gt;Whether fixing bugs or implementing new features, I adhere to the &lt;a href=&#34;http://programmer.97things.oreilly.com/wiki/index.php/The_Boy_Scout_Rule&#34;&gt;Boy Scout Rule&lt;/a&gt; as much as possible, balancing the urge to rewrite everything with what makes sense for the changes being made. Despite my attempts at pragmatism, Google&amp;rsquo;s roughly semiannual overhaul of the Android UI has a way of quickly dating apps that do not keep up with the latest design guidelines. Remember gradients everywhere in Gingerbread? Or when Honeycomb and Holo ushered in the last big design change? &lt;a href=&#34;http://www.google.com/design/spec/material-design/introduction.html&#34;&gt;Material Design&lt;/a&gt; continues that tradition, only more ambitious in scope; this time unifying the design of mobile, web, and Chromebook apps in one fell swoop.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://googleblog.blogspot.com/2014/10/android-be-together-not-same.html&#34;&gt;official announcement&lt;/a&gt; of Lollipop and the release of the latest support library last month motivated me to update Music Library yet again to keep up with the latest evolution of the platform. After surveying the contents of the new version of the support library, I got to work bringing Material Design to the app.&lt;/p&gt;

&lt;p&gt;I started by applying the &lt;code&gt;Theme.AppCompat.Light.DarkActionBar&lt;/code&gt; theme as described on the &lt;a href=&#34;http://android-developers.blogspot.com/2014/10/appcompat-v21-material-design-for-pre.html&#34;&gt;Android Developers&lt;/a&gt; blog, which changed the action bar, color scheme, and widgets from the now too-familiar Holo electric blue to the new Material look.&lt;/p&gt;

&lt;p&gt;Once that was done, I found that the spinner navigation the app was using has been deprecated in Lollipop. Taking a cue from Google&amp;rsquo;s own apps such as Gmail and the Play Store, I decided to move the shelf list into a left navigation drawer. Menu options such as Scan Barcode, Settings, and editing the list of shelves also moved into the nav drawer. This left only the more common actions of Add, Edit, Search, and Sort in the action bar/overflow menu, cleaning things up significantly.&lt;/p&gt;

&lt;p&gt;From there, I turned to the album art images, making them more prominent throughout the app. I used the &lt;code&gt;GridLayoutManager&lt;/code&gt; and &lt;code&gt;CardView&lt;/code&gt; widget to display the list of albums in a grid rather than a list, putting the focus on the artwork that makes our favorite albums immediately recognizable. This had the additional benefit of obviating the coverflow view that while fun to play with, always felt a bit out of place on Android.&lt;/p&gt;

&lt;p&gt;To further enhance the look of the app, I used the &lt;a href=&#34;https://blog.stylingandroid.com/palette-part-2/&#34;&gt;Palette library&lt;/a&gt; to extract a dark vibrant color from each album&amp;rsquo;s artwork for the action bar and fonts. As the selected album changes, the app&amp;rsquo;s colors morph to complement the artwork. I&amp;rsquo;m amazed how well it works. I&amp;rsquo;ve yet to see a case where it didn&amp;rsquo;t result in just the right color for the image being displayed.&lt;/p&gt;

&lt;p&gt;As you can see from the before and after screen shots below, the redesign breathes new life into the app. I&amp;rsquo;m quite pleased with the result. I look forward to applying more Material Design elements to this app and others over the next few months.
&lt;br/&gt;
&lt;table style=&#34;margin-left: auto; margin-right: auto&#34;&gt;
  &lt;tr&gt;
    &lt;th&gt;Version 2.x (Holo)&lt;/th&gt;
    &lt;th&gt;Version 3.0 (Material Design)&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;a href=&#34;http://andydyer.org/images/music_library_title_list_v2.png&#34;&gt;&lt;img src=&#34;http://andydyer.org/images/music_library_title_list_v2.png&#34; alt=&#34;Title List v2.x&#34; style=&#34;width: 253px; margin-left: 20px; margin-right: 20px; margin-bottom:20px&#34; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href=&#34;http://andydyer.org/images/music_library_title_list_v3.png&#34;&gt;&lt;img src=&#34;http://andydyer.org/images/music_library_title_list_v3.png&#34; alt=&#34;Title List v3.0&#34; style=&#34;width: 253px; margin-right: 20px; margin-bottom: 20px&#34; /&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;a href=&#34;http://andydyer.org/images/music_library_title_edit_v2.png&#34;&gt;&lt;img src=&#34;http://andydyer.org/images/music_library_title_edit_v2.png&#34; alt=&#34;Title Edit v2.x&#34; style=&#34;width: 253px; margin-left:20px; margin-right: 20px; margin-bottom: 20px&#34; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href=&#34;http://andydyer.org/images/music_library_title_edit_v3.png&#34;&gt;&lt;img src=&#34;http://andydyer.org/images/music_library_title_edit_v3.png&#34; alt=&#34;Title Edit v3.0&#34; style=&#34;width: 253px; margin-right: 20px; margin-bottom: 20px&#34; /&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;
&lt;div style=&#34;text-align: center&#34;&gt;
    &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.dandydev.medialibrary&#34; title=&#34;Get Music Library&#34;&gt;
        &lt;img alt=&#34;Get it on Google Play&#34; width=&#34;203&#34; src=&#34;http://andydyer.org/images/google_play_badge@2x.png&#34;&gt;
    &lt;/a&gt;
&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android&#39;s Material Design and The Bauhaus</title>
      <link>http://andydyer.org/blog/2014/07/13/androids-material-design-and-the-bauhaus/</link>
      <pubDate>Sun, 13 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://andydyer.org/blog/2014/07/13/androids-material-design-and-the-bauhaus/</guid>
      <description>&lt;p&gt;Since Android Gingerbread (v2.3), loyalists know that each version has an Easter egg that can be accessed by repeatedly tapping the version number on the Settings &amp;gt; About screen. The Android &amp;ldquo;L&amp;rdquo; Preview is no exception.&lt;/p&gt;

&lt;p&gt;While test driving the new version, I naturally had to see what Google had hidden for me in their latest release. Previous versions have had everything from &lt;a href=&#34;https://www.youtube.com/watch?v=PeAFCIvqNxc&#34;&gt;gingerbread zombies&lt;/a&gt; to &lt;a href=&#34;https://www.youtube.com/watch?v=DfY73GBBHxg&#34;&gt;Nyandroids&lt;/a&gt; and a &lt;a href=&#34;https://www.youtube.com/watch?v=iN-nJdAJS7g&#34;&gt;pile of jelly beans&lt;/a&gt;. The Android &amp;ldquo;L&amp;rdquo; Preview build has a &lt;a href=&#34;https://www.youtube.com/watch?v=_He5MIYJas8&#34;&gt;simple animation of random overlapping red and blue rectangles&lt;/a&gt;. Several Android blogs mentioned this, but dismissed it as &lt;a href=&#34;http://www.androidcentral.com/android-l-Previews-easter-egg-webdriver-torso&#34;&gt;mysterious&lt;/a&gt; and &lt;a href=&#34;http://www.slashgear.com/hands-on-with-the-android-l-features-google-didnt-mention-27335613/&#34;&gt;strange&lt;/a&gt;. While these random rectangles are clearly the same used by Google&amp;rsquo;s &lt;a href=&#34;http://www.bbc.com/news/technology-27778071&#34;&gt;WebDriver Torso&lt;/a&gt; YouTube video quality testing, so far everyone seems to have missed the most obvious explanation.&lt;/p&gt;

&lt;p&gt;On my trip to Berlin to speak at &lt;a href=&#34;http://de.droidcon.com/2014/session/froyo-kitkat-two-years-developing-maintaining-deliradio&#34;&gt;DroidCon&lt;/a&gt; this past May, I visited the &lt;a href=&#34;http://www.bauhaus.de/de/bauhaus-archiv/&#34;&gt;Bauhaus Archive&lt;/a&gt;. There I learned quite a bit about the history of Germany&amp;rsquo;s world-renowned design school, including their study of basic shapes and primary colors. Among the many drawings, paintings, and other exhibits was this piece by &lt;a href=&#34;http://en.wikipedia.org/wiki/L%C3%A1szl%C3%B3_Moholy-Nagy&#34;&gt;Lásló Moholy-Nagy&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;div style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;http://bauhaus-online.de/en/atlas/werke/construction-z1&#34; title=&#34;Construction Z1&#34;&gt;&lt;img src=&#34;http://andydyer.org/images/moholy_nagy.jpg&#34; alt=&#34;Moholy-Nagy&#34; style=&#34;width: 467px;&#34; /&gt;&lt;/div&gt;&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Clearly, the Android &amp;ldquo;L&amp;rdquo; Preview Easter egg and Material Design itself are a nod to the Bauhaus&amp;rsquo; influence. It is the Bauhaus aesthetic made digital; layered [red](&lt;a href=&#34;http://cdn.androidpolice.com/wp-content/uploads/2014/06/nexusae0_Screenshot_&amp;quot;2014-06-26&amp;quot;&#34;&gt;http://cdn.androidpolice.com/wp-content/uploads/2014/06/nexusae0_Screenshot_&amp;quot;2014-06-26&amp;quot;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The real mystery is why a Google search for &amp;ldquo;&lt;a href=&#34;https://www.google.com/search?q=android+material+design+bauhaus&#34;&gt;android material design bauhaus&lt;/a&gt;&amp;rdquo; currently only returns a &lt;a href=&#34;http://www.ukessays.com/essays/cultural-studies/influence-of-the-bauhaus-on-design-cultural-studies-essay.php&#34;&gt;couple&lt;/a&gt; &lt;a href=&#34;http://forum.xda-developers.com/showthread.php?t=2794642&amp;amp;page=4&#34;&gt;results&lt;/a&gt; that make this connection. This is my attempt to make it at least three.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>