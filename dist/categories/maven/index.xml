<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Maven on Andy Dyer</title>
    <link>http://andydyer.org/categories/maven/</link>
    <description>Recent content in Maven on Andy Dyer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2015 Copyright Andy Dyer</copyright>
    <lastBuildDate>Sun, 05 Oct 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://andydyer.org/categories/maven/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hosting Android Dependencies on GitHub</title>
      <link>http://andydyer.org/blog/2014/10/05/hosting-android-dependencies-on-github/</link>
      <pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://andydyer.org/blog/2014/10/05/hosting-android-dependencies-on-github/</guid>
      <description>&lt;p&gt;As I mentioned in my &lt;a href=&#34;http://andydyer.org/blog/2014/09/29/delombok-and-javadoc-with-gradle/&#34;&gt;last post&lt;/a&gt;, I&amp;rsquo;m developing an SDK at work. The libraries I use most frequently in my apps are all included as Maven dependencies. Adding a line to my &lt;code&gt;build.gradle&lt;/code&gt; file is much preferred to downloading a JAR file. To make the SDK as easy as possible for developers to include in their projects, I wanted to deliver it the same way.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://central.sonatype.org/&#34;&gt;Maven Central&lt;/a&gt; is the de facto repository for open source library hosting. Since the SDK I&amp;rsquo;m developing is part of a product and as such will not be open source, I needed to find another place to host the binary that would still allow it to be included via Maven.&lt;/p&gt;

&lt;p&gt;Libraries hosted on Maven Central are included in &lt;code&gt;build.gradle&lt;/code&gt;with the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;repositories {
    mavenCentral()
}

dependencies {
    compile &#39;com.squareup.retrofit:retrofit:1.6.1&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Including another Maven source is as simple as adding its URL to the &lt;code&gt;repositories&lt;/code&gt; block and then including the group/artifact/version string as normal in the &lt;code&gt;dependencies&lt;/code&gt; block:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;repositories {
    mavenCentral()
    maven { url &amp;quot;https://raw.github.com/username/my-super-cool-sdk/master&amp;quot; }
}

dependencies {
    compile &#39;com.squareup.retrofit:retrofit:1.6.1&#39;
    compile &#39;com.username:my-super-cool-sdk:1.0.0&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But how do we actually prepare a library for Maven? This can be done in Gradle with the Maven plugin:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;apply plugin: &#39;maven&#39;

uploadArchives {
    repositories.mavenDeployer {
        def deployPath = file(getProperty(&#39;aar.deployPath&#39;))
        repository(url: &amp;quot;file://${deployPath.absolutePath}&amp;quot;)
        pom.project {
            groupId &#39;com.username&#39;
            artifactId &#39;my-super-cool-sdk&#39;
            version &amp;quot;1.0.0&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing to note is the call to &lt;code&gt;getProperty(&#39;aar.deployPath&#39;)&lt;/code&gt; above. This reads the value of the &lt;code&gt;aar.deployPath&lt;/code&gt; property in my &lt;code&gt;gradle.properties&lt;/code&gt; file. The library project is in a separate GitHub repository from the one where the SDK binary is hosted, so the deploy path property provides the relative path to the local destination directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;aar.deployPath=../../../../my-super-cool-sdk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once everything is in place, running &lt;code&gt;gradle uploadArchives&lt;/code&gt; exports the AAR binary and necessary POM/XML files to the target directory. From there, all that&amp;rsquo;s left to do is commit the files and push them to the SDK repository on GitHub.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>