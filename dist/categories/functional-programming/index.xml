<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Functional Programming on Andy Dyer</title>
    <link>http://andydyer.org/categories/functional-programming/</link>
    <description>Recent content in Functional Programming on Andy Dyer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2015 Copyright Andy Dyer</copyright>
    <lastBuildDate>Fri, 03 Feb 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://andydyer.org/categories/functional-programming/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>A Functional Queue in JavaScript</title>
      <link>http://andydyer.org/blog/2012/02/03/a-functional-queue-in-javascript/</link>
      <pubDate>Fri, 03 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>http://andydyer.org/blog/2012/02/03/a-functional-queue-in-javascript/</guid>
      <description>&lt;p&gt;
It&#39;s been over a year since I&#39;ve posted here, but I&#39;ve been busy delving into Android and Ruby on Rails among other things. To get back into blogging (hopefully more regularly...we&#39;ll see), I thought I&#39;d share an interesting JavaScript exercise I was asked to complete as part of a job interview recently.
&lt;/p&gt;
&lt;p&gt;
The task was to build a functional queue in JavaScript.  A functional queue is a queue (first in, first out) which is implemented with no side-effects.  For instance, a function to enqueue a value onto an existing queue will return a new object which represents the larger queue.  The original (smaller) queue is still available.
&lt;/p&gt;
&lt;p&gt;
In order to implement a functional queue, we need to be able to do a few things that are not immediately obvious in Javascript:
&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Create a new instance of the array of queue items when an item is enqueued/dequeued&lt;/li&gt;
	&lt;li&gt;Overload the class constructor so it can be created with an empty array (new queue) or an existing array (result of a enqueue/dequeue operation&lt;/li&gt;
	&lt;li&gt;Return both the dequeued item and a new queue as a result of a dequeue operation&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
To return a new instance of the array of queue items, we can leverage the &lt;a href=&#34;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/slice&#34;&gt;array.slice()&lt;/a&gt; method, which selects part of an array and returns a new array.  The trick here is to pass an index of zero to the slice method to get a new array instance and then use &lt;a href=&#34;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push&#34;&gt;array.push()&lt;/a&gt; to enqueue or &lt;a href=&#34;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/shift&#34;&gt;array.shift()&lt;/a&gt; to dequeue.
&lt;/p&gt;
&lt;p&gt;
To overload the class constructor, we can use the &lt;a href=&#34;https://developer.mozilla.org/en/JavaScript/Reference/Functions_and_function_scope/arguments&#34;&gt;arguments array&lt;/a&gt; to pass an existing array and create a new one if none is passed.
&lt;/p&gt;
&lt;p&gt;
Finally, to return both the dequeued item and a new queue as a single result, we can use an &lt;a href=&#34;https://developer.mozilla.org/en/JavaScript/Guide/Values,_Variables,_and_Literals#Object_literals&#34;&gt;object literal&lt;/a&gt;.
&lt;/p&gt;
The finished product looks like this:
&lt;pre&gt;var Queue = function() {
	var items = arguments.length &amp;gt; 0 ? arguments[0] : new Array();

	return {
		length: function() {
			return items.length;
		},
		isEmpty: function() {
			return this.length() == 0;
		},
		enqueue: function(item) {
			var newItems = items.slice(0);
			newItems.push(item);
			return new Queue(newItems);
		},
		dequeue: function() {
			var newItems = items.slice(0);
			var item = newItems.shift();
			return {
				queue: new Queue(newItems),
				value: item
			};
		},
		head: function() {
			return items[0];
		}
	};
}&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>