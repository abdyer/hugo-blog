<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>http://andydyer.org/post/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2015 Copyright Andy Dyer</copyright>
    <lastBuildDate>Sat, 02 Jan 2016 14:38:02 -0600</lastBuildDate>
    <atom:link href="http://andydyer.org/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Top 10 Albums of 2015</title>
      <link>http://andydyer.org/blog/2016/01/02/top-10-albums-of-2015/</link>
      <pubDate>Sat, 02 Jan 2016 14:38:02 -0600</pubDate>
      
      <guid>http://andydyer.org/blog/2016/01/02/top-10-albums-of-2015/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m a bit late with my annual Top 10 list, but here it is roughly ranked by Google Music play count:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Earl Sweatshirt - I Don&amp;rsquo;t Like Shit, I Don&amp;rsquo;t Go Outside&lt;/strong&gt; I was finally lucky enough to &lt;a href=&#34;http://www.houstonpress.com/music/earl-sweatshirt-revels-in-raps-odd-future-at-warehouse-live-7746980&#34;&gt;see him live&lt;/a&gt; and he didn&amp;rsquo;t disappoint. Another great release. This soundtracked numerous skateboard and chill sessions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vince Staples - Summertime &amp;lsquo;06&lt;/strong&gt; His &amp;ldquo;Hell Can Wait&amp;rdquo; EP made my list last year and I knew this one would be on this year&amp;rsquo;s list right away. The subject matter is heavy, but you may be nodding your head so much at first you won&amp;rsquo;t notice. I recommend multiple listens so you can fully appreciate both its depth and undeniable crunkness.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Drumcode - A-Sides Volume III&lt;/strong&gt; Ever since getting bitten by the techno bug, I&amp;rsquo;ve compiled a solid list of podcasts I listen to regularly like &lt;a href=&#34;http://www.droidbehavior.com/blog/podcast/&#34;&gt;Droid Podcast&lt;/a&gt; and Adam Beyer&amp;rsquo;s &lt;a href=&#34;http://drumcode.se/&#34;&gt;Drumcode Radio (DCR)&lt;/a&gt;. This collection of Drumcode singles includes many that were feature on DCR.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fuzz - II&lt;/strong&gt; This Ty Segall side project returns with another face melting set. For when you want to rock. Hard.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ryan Adams - 1989&lt;/strong&gt; I had successfully avoided knowingly hearing any of Taylor Swift&amp;rsquo;s album until I heard this song-for-song cover album from the prolific Mr. Adams. Now I realize they&amp;rsquo;ve been plaguing my every shopping experience for months. But there&amp;rsquo;s no way around it, these are good songs. I contend they&amp;rsquo;re even better with Ryan Adams performing them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Panda Bear - Panda Bear Meets the Grim Reaper&lt;/strong&gt; For the uninitiated, Panda Bear is a member of Animal Collective, a pretty kick ass indie psych band. This is his fifth solo album. Reverb, chants, and a masterful combination of Eastern &amp;amp; electronic instruments pay tribute to &lt;a href=&#34;https://www.youtube.com/watch?v=lD4sxxoJGkA&#34;&gt;Pet Sounds&lt;/a&gt; and beyond.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Buxton - Half a Native&lt;/strong&gt; Houston&amp;rsquo;s Buxton delivers an album of honest and heartfelt songs. We&amp;rsquo;ve all been there, but when Sergio Trevino sings about shyly introducing himself to a woman in &amp;ldquo;Pool Hall&amp;rdquo;, you feel like you &lt;em&gt;are&lt;/em&gt; there.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deerhunter - Fading Frontier&lt;/strong&gt; Bradford Cox and crew continue their legacy of jangly rock songs that are hard to categorize, but always sound like Deerhunter.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Car Seat Headrest - Teens of Style&lt;/strong&gt; I owe this discovery to NPR All Songs Considered&amp;rsquo;s coverage of the CMJ Music Festival. The young Will Toledo&amp;rsquo;s bedroom recordings confirm he has another great album coming when he records in a proper studio in 2016.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Wilco - Star Wars&lt;/strong&gt; This Wilco album came out of nowhere&amp;hellip;no press coverage, no teased release date&amp;hellip;just a free download on the interwebz. Sure, it&amp;rsquo;s another Wilco album, but one that I enjoyed a bit more than their last two.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLiOTTgupZ1CBE0OdDyg1jOfQpwr0VlbA9&#34;&gt;Here&amp;rsquo;s a playlist&lt;/a&gt; with one of my favorite songs from each album. Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using a Third Party FAB with CoordinatorLayout</title>
      <link>http://andydyer.org/blog/2015/06/28/using-a-third-party-fab-with-coordinatorlayout/</link>
      <pubDate>Sun, 28 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://andydyer.org/blog/2015/06/28/using-a-third-party-fab-with-coordinatorlayout/</guid>
      <description>&lt;p&gt;Before the Design Support Library was announced at Google I/O last month, I had numerous third party libraries in my projects for various elements of Material Design. I&amp;rsquo;ve enjoyed replacing the nav drawer, tabs, and parallax scrolling libraries with their support library counterparts. However, on one of my projects, we needed an expanding floating action button (FAB) similar to the one in &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.google.android.apps.inbox&#34;&gt;Inbox&lt;/a&gt;, which the support library does not currently provide.&lt;/p&gt;

&lt;p&gt;I chose &lt;a href=&#34;https://github.com/futuresimple/android-floating-action-button&#34;&gt;this&lt;/a&gt; FAB library since it includes a cool little animation from the plus sign to the &amp;ldquo;X&amp;rdquo; when expanding the menu. I foolishly thought I could just drop this into a CoordinatorLayout in place of the support library&amp;rsquo;s FAB. If you&amp;rsquo;ve checked out Chris Banes&amp;rsquo; excellent &lt;a href=&#34;https://github.com/chrisbanes/cheesesquare&#34;&gt;Cheesesquare&lt;/a&gt; sample, you might have noticed the &lt;code&gt;app:layout_anchor&lt;/code&gt; and &lt;code&gt;app:layout_anchorGravity&lt;/code&gt; attributes defined on the &lt;code&gt;FloatingActionButton&lt;/code&gt; element:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;android.support.design.widget.FloatingActionButton
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:layout_width=&amp;quot;wrap_content&amp;quot;
        app:layout_anchor=&amp;quot;@id/appbar&amp;quot;
        app:layout_anchorGravity=&amp;quot;bottom|right|end&amp;quot;
        android:src=&amp;quot;@drawable/ic_discuss&amp;quot;
        android:layout_margin=&amp;quot;@dimen/fab_margin&amp;quot;
        android:clickable=&amp;quot;true&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These two attributes are what tells the enclosing &lt;code&gt;CoordinatorLayout&lt;/code&gt; how to position the button and how it should behave when scrolling. To investigate how they are used, I used the good ol&amp;rsquo; &lt;code&gt;⌘+B&lt;/code&gt; shortcut to go to the &lt;code&gt;FloatingActionButton&lt;/code&gt;&amp;rsquo;s class definition. While the support library is not open source, I was still able to view the decompiled source.&lt;/p&gt;

&lt;p&gt;The first thing I noticed is the &lt;code&gt;@DefaultBehavior(FloatingActionButton.Behavior.class)&lt;/code&gt; annotation at the top of the class. The &lt;code&gt;FloatingActionButton.Behavior&lt;/code&gt; child class provides the &lt;code&gt;Behavior&lt;/code&gt; implementation used by &lt;code&gt;CoordinatorLayout&lt;/code&gt;. I copied and pasted this inner class into my own subclass of the third party library&amp;rsquo;s &lt;code&gt;FloatingActionsMenu&lt;/code&gt; class, updated the generic type, and started resolving the compile errors. It didn&amp;rsquo;t take me long to realize that several package private classes and methods were being called in this code. There are two ways to solve this. One is to copy the decompiled source of these classes into my project, but there is still the &lt;code&gt;AppBarLayout&lt;/code&gt;&amp;rsquo;s package private &lt;code&gt;getMinimumHeightForVisibleOverlappingContent()&lt;/code&gt; method to deal with. A simpler, yet slightly hackish way to handle this is to just define our class in a &lt;code&gt;android.support.design.widget&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;The last issue specific to this library is that its measured height includes its children, so the FAB is not correctly positioned on the edge of the image and content views. After a bit of experimentation, I solved this by overriding &lt;code&gt;onMeasure()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Override
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
    super.onMeasure(widthMeasureSpec, heightMeasureSpec);
    // measured height includes child views, so translate Y to align FAB on view edges
    if (getTranslationY() == 0) {
        View fab = getChildAt(getChildCount() - 1); // last child is the FAB
        int shadowRadius = getResources().getDimensionPixelSize(R.dimen.fab_shadow_radius);
        int offset = (getMeasuredHeight() - fab.getMeasuredHeight() + shadowRadius) / 2;
        ViewCompat.setTranslationY(this, offset);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/abdyer/cheesesquare/blob/master/app/src/main/java/android/support/design/widget/SupportFloatingActionsMenu.java&#34;&gt;source&lt;/a&gt; for &lt;code&gt;SupportFloatingActionsMenu&lt;/code&gt; is on GitHub in &lt;a href=&#34;https://github.com/abdyer/cheesesquare&#34;&gt;my Cheesesquare fork&lt;/a&gt;. Hopefully we&amp;rsquo;ll see first class support for integrating alternate FAB implementations more cleanly with the support library soon.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a screen shot of the end result:&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://andydyer.org/images/cheesesquare_fab_menu.png&#34; alt=&#34;Cheesesquare FAB menu&#34; style=&#34;width: 405px; margin-left: auto; margin-right: auto; display: block&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Time I Interviewed at Google</title>
      <link>http://andydyer.org/blog/2015/06/09/the-time-i-interviewed-at-google/</link>
      <pubDate>Tue, 09 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://andydyer.org/blog/2015/06/09/the-time-i-interviewed-at-google/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve had a pretty big secret for the past month or so; something that only my friends and family know about. We&amp;rsquo;ve all been there, sneaking around interviewing for a new job like we&amp;rsquo;re having an affair. Only this time, it was different. As an Android developer, this was like trying out for the majors. No&amp;hellip;seriously, y&amp;rsquo;all&amp;hellip;Google invited me to interview.&lt;/p&gt;

&lt;p&gt;My adventure started early last month as I was triaging my inbox. There were the usual spammy recruiter emails seeking &amp;ldquo;rock stars&amp;rdquo; and &amp;ldquo;ninjas&amp;rdquo; with skills in technologies I abandoned years ago. I skimmed what appeared to be another of these and stopped when I read &amp;ldquo;mobile is a huge priority for us here at Google&amp;rdquo;. Did I read that correctly? Apparently I did. Where did this come from? The domain was google.com. &lt;a href=&#34;http://cdn.meme.am/instances/500x/54979149.jpg&#34;&gt;For real tho&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I replied to the email, not knowing what to expect. I thought maybe they were surveying Android developers about their experiences developing for the platform or something. I kept asking myself, &amp;ldquo;I&amp;rsquo;m not really Google material, am I?&amp;rdquo; I scheduled an initial call with the recruiter in which she walked me through the interview process. It just so happened that the call was on my birthday, which gave me another reason to celebrate that evening.&lt;/p&gt;

&lt;p&gt;After the initial phone call with the recruiter, I received an email with a list of topics typically covered in the notoriously difficult Google interviews. As someone who studied business rather than computer science in college, I had a minor panic as I reviewed the list. I recognized some things from my professional experience, but the majority of them were completely unfamiliar to me. The list included suggested articles and books to help prepare. I briefly debated whether this particular mountain was worth climbing and decided I should try. It can&amp;rsquo;t be any harder than learning German, can it?&lt;/p&gt;

&lt;p&gt;As I tend to do any time a seemingly insurmountable challenge presents itself, I devised a plan of attack and got to work. I had two weeks to acquire a passable knowledge of computer science before the first phone interview. Every night after work and a large portion of the weekends that followed were spent learning about linked lists, binary search trees, graph traversal algorithms, etc. Most of this was gleaned from &lt;a href=&#34;http://www.amazon.com/gp/product/098478280X/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=098478280X&amp;amp;linkCode=as2&amp;amp;tag=slacod-20&amp;amp;linkId=MT4O5MQNLGYMEZPY&#34;&gt;Cracking the Coding Interview&lt;/a&gt;, which I highly recommend to anyone interviewing with Silicon Valley tech companies.&lt;/p&gt;

&lt;p&gt;When the day of the phone interview arrived, I still didn&amp;rsquo;t think I was ready, but I took a few deep breaths and did my best. I&amp;rsquo;m not supposed to talk about the specific questions I was asked, so I&amp;rsquo;ll just say that I was given a couple coding problems to solve in a Google Doc while the interviewer watched. I didn&amp;rsquo;t have autocomplete or my trusty IDE shortcut combinations, but that didn&amp;rsquo;t stop me from pressing them anyway as I typed. I followed the advice from the book, first asking questions to frame the problem and talking through my thought process as I worked. At one point, when I couldn&amp;rsquo;t remember something relevant to the problem that I had studied, I assured him that I knew exactly where to find the answer. When the time was up, I asked the interviewer a few questions about life as a Googler. He finished by giving me some general advice about being more confident in future interviews while being careful to say that he couldn&amp;rsquo;t tell me how I did. Nerves aside, I was a pretty pleasant experience overall.&lt;/p&gt;

&lt;p&gt;Multiple times that evening and the next morning, I replayed the interview in my head, kicking myself for not remembering this or for forgetting to say that. I thought I had done okay considering my starting point two weeks prior, but doubted it would be enough. Luckily, my uncertainty was short-lived. The recruiter called me that afternoon to tell me that I had made it to the second round of interviews in Mountain View. I was at work and it took all my self control to not run through the office shouting the good news to my coworkers. I settled for a muted fist pump and a whispered &amp;ldquo;hell yeah&amp;rdquo; before sharing the news over chat with my wife and friends.&lt;/p&gt;

&lt;p&gt;Shortly after that, I was given more information about how to prepare for the on site interviews. With Google I/O approaching, I knew everyone in Mountain View was busy, allowing me a bit more time study. I decided to read Steven Skiena&amp;rsquo;s &lt;a href=&#34;http://www.amazon.com/gp/product/1849967202/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1849967202&amp;amp;linkCode=as2&amp;amp;tag=slacod-20&amp;amp;linkId=Z76TCB3NM7TPLXP5&#34;&gt;Algorithm Design Manual&lt;/a&gt; and did problems on &lt;a href=&#34;http://projecteuler.net&#34;&gt;Project Euler&lt;/a&gt; to practice.&lt;/p&gt;

&lt;p&gt;I scheduled a couple &amp;ldquo;vacation&amp;rdquo; days and flew into San Jose the day before the interview. I did some last minute studying and tried to get some rest. The next morning, I drove to the Googleplex after saying &amp;ldquo;OK Google, navigate to Google&amp;rdquo; to my watch with a gleeful laugh. On my way to the reception desk, I saw the infamous Google buses unloading their passengers into a sea of people walking and riding bikes to their respective offices. As many others have said, it looked and felt like being back on a university campus.&lt;/p&gt;

&lt;p&gt;The recruiter met me at reception and showed me to the interview room. I had three interviews before lunch and two after it. Instead of coding in a Google Doc this time, I was coding on a whiteboard. As someone who rarely uses a writing instrument for anything other than signing my name, this was yet another source of anxiety initially. The questions were challenging and thought-provoking, but I think my studying prepared me fairly well. As the day went on, I was less and less nervous. The interviewers were all really nice and seemed to be rooting for me, occasionally offering hints or leading questions along the way.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m reflecting on the day&amp;rsquo;s events in my head as I type this on the flight home, fingers crossed that I made the cut. This would be a huge opportunity for learning and professional growth. I want it pretty badly, but if it doesn&amp;rsquo;t work out, I&amp;rsquo;m ready for the next opportunity. I enjoyed the challenge and I&amp;rsquo;m surprised how much I&amp;rsquo;ve learned over the past month.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll end with a few random stats from the trip:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Self driving Lexus SUV sightings in Mountain View: 4&lt;/li&gt;
&lt;li&gt;Google/Android t-shirts acquired: 2&lt;/li&gt;
&lt;li&gt;Number of texts from United about my return flight being delayed before I even made it to the airport: 4&lt;/li&gt;
&lt;li&gt;Minutes spent in rush hour traffic between San Jose and SFO to catch an earlier flight home: 60&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h5 id=&#34;update-june-22-2015-two-weeks-later:ab8a396fcea9cf8f83067c577c7b66f5&#34;&gt;Update June 22, 2015 (two weeks later)&lt;/h5&gt;

&lt;p&gt;I just heard from the recruiter that I didn&amp;rsquo;t get the job. Of course I&amp;rsquo;m bummed and wondering &amp;ldquo;what could have been&amp;rdquo;, but I&amp;rsquo;m also relieved to not be entering the drought stricken, traffic congested, rent-is-too-damn-high Bay Area.&lt;/p&gt;

&lt;p&gt;If you need me, I&amp;rsquo;ll be in Houston keepin&amp;rsquo; it trill.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Loading a List of Objects from Firebase</title>
      <link>http://andydyer.org/blog/2015/04/06/loading-a-list-of-objects-from-firebase/</link>
      <pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://andydyer.org/blog/2015/04/06/loading-a-list-of-objects-from-firebase/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been working with &lt;a href=&#34;https://www.firebase.com/&#34;&gt;Firebase&lt;/a&gt; lately in preparation for adding data synchronization to my &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.dandydev.medialibrary&#34;&gt;Music Library&lt;/a&gt; app. Their &lt;a href=&#34;https://www.firebase.com/docs/android/quickstart.html&#34;&gt;docs&lt;/a&gt; did a great job of getting me set up. Using the &lt;a href=&#34;https://github.com/firebase/firebase-login-demo-android&#34;&gt;sample app&lt;/a&gt; as a guide, I even got Google+ OAuth working without much trouble. From there, it didn&amp;rsquo;t take long to load data into a Firebase instance partitioned by Google account. All that was left was to query the data out of Firebase and I&amp;rsquo;d be able to see the sync magic in action.&lt;/p&gt;

&lt;p&gt;As you probably guessed from the title of this post, fetching a collection of objects from Firebase was not quite as straightforward. The documentation on &lt;a href=&#34;https://www.firebase.com/docs/android/guide/retrieving-data.html&#34;&gt;retrieving data&lt;/a&gt; covers the methods for executing asynchronous queries, but uses HashMap results instead of the objects I initially stored. Um&amp;hellip;no thanks.&lt;/p&gt;

&lt;p&gt;I eventually noticed an overload of the &lt;code&gt;getValue()&lt;/code&gt; method  of the &lt;code&gt;DataSnapshot&lt;/code&gt; class that takes a &lt;code&gt;GenericTypeIndicator&amp;lt;T&amp;gt;&lt;/code&gt; parameter. In the &lt;a href=&#34;https://www.firebase.com/docs/java-api/javadoc/com/firebase/client/GenericTypeIndicator.html&#34;&gt;JavaDocs&lt;/a&gt; for that class, is the secret sauce:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;GenericTypeIndicator&amp;lt;List&amp;lt;Beer&amp;gt;&amp;gt; typeIndicator = new GenericTypeIndicator&amp;lt;List&amp;lt;Beer&amp;gt;&amp;gt;() {};
List&amp;lt;Beer&amp;gt; beers = snapshot.getValue(typeIndicator);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
Combining that with &lt;a href=&#34;https://gist.github.com/gsoltis/86210e3259dcc6998801&#34;&gt;these&lt;/a&gt; awesome RxJava Firebase bindings, I can now load a list with something as simple as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private Observable&amp;lt;List&amp;lt;Beer&amp;gt;&amp;gt; loadBeers() {
    Firebase firebase = new Firebase(&amp;quot;https://some-instance.firebaseio.com/beers&amp;quot;);
    GenericTypeIndicator&amp;lt;List&amp;lt;Beer&amp;gt;&amp;gt; typeIndicator = new GenericTypeIndicator&amp;lt;List&amp;lt;Beer&amp;gt;&amp;gt;() {};
    return RxFirebase.observe(firebase.orderByKey())
        .map(snapshot -&amp;gt; snapshot.getValue(typeIndicator));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aside from this little hiccup, Firebase is hard to beat for easy persistence that automatically syncs across devices. I look forward to seeing what [Google](&lt;a href=&#34;https://www.firebase.com/blog/&amp;quot;2014-10-21&amp;quot;&#34;&gt;https://www.firebase.com/blog/&amp;quot;2014-10-21&amp;quot;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why I&#39;m Unironically Carrying This Small, Older Android Phone</title>
      <link>http://andydyer.org/blog/2015/02/19/why-im-unironically-carrying-this-small-older-android-phone/</link>
      <pubDate>Thu, 19 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://andydyer.org/blog/2015/02/19/why-im-unironically-carrying-this-small-older-android-phone/</guid>
      <description>&lt;p&gt;I thoroughly enjoyed my last night in Berlin a little over a week ago; so much that I didn&amp;rsquo;t notice my phone was missing until the end of the night. Shake your head and say it couldn&amp;rsquo;t happen to you. I thought the same thing until it did. Normally, I keep my phone in one of my front pockets, but I was wearing a coat that covered the pocket, making it a bit more difficult to grab my phone quickly to check Google Maps. Since my coat has a side access pocket in the chest, I stowed my phone there while walking around. I&amp;rsquo;m guessing a skillful thief at the last bar spotted my phone in that side pocket and was able to slide it out without me knowing. I was in a crowded room and often looking to one side as I talked to different people. Self-shaming thoughts aside, sometimes it happens.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pro Tip: When traveling abroad, keep your main SIM card with your luggage at your hotel/rental. Buy a local SIM if possible for faster data. Losing my phone but not my main SIM card made a bad situation a bit better.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once I noticed my phone was missing, I faced all manner of unusual challenges. Did I remember the address of my AirBnB flat? How will I wake up on time for my train in the morning without an alarm? How will I get to the train station? Luckily I was able to get back to the flat without a problem. I did wake up too late for my train the next morning, but had no problem navigating to the train station after checking the route on my laptop before leaving.&lt;/p&gt;

&lt;p&gt;I arrived at the train station and learned that there was another train a couple hours later. Not bad. This gave me time to grab a flat white &amp;amp; croissant and then do some phone shopping. With the self-shaming level still high, I decided I didn&amp;rsquo;t want to spend more than 200€ on a (possibly temporary) replacement. At that price level, a &lt;a href=&#34;http://www.samsung.com/uk/consumer/mobile-devices/smartphones/android/GT-I9195ZKABTU&#34;&gt;Samsung Galaxy S4 Mini&lt;/a&gt; was pretty much my only choice. It shipped with KitKat (4.4.2) and withholding &lt;a href=&#34;http://www.androidpolice.com/wp-content/uploads/2013/02/nexusae0_182.png&#34;&gt;Samsung&amp;rsquo;s TouchWiz UI nonsense&lt;/a&gt;, it&amp;rsquo;s proven to be a pretty decent little phone. Installing the &lt;a href=&#34;http://www.cyanogenmod.org/&#34;&gt;CyanogenMod&lt;/a&gt; 12 ROM got me a stock Android UI and that &lt;a href=&#34;http://andydyer.org/images/lollipop.jpg&#34;&gt;sweet, sweet Lollipop&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The more technically savvy among you may ask whether I was able to track my device using the Android Device Manager. This is all it&amp;rsquo;s shown for the past week:
&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://andydyer.org/images/android_device_manager.png&#34; alt=&#34;Android Device Manager&#34; style=&#34;width: 827px; margin-left: auto; margin-right: auto; display: block&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
After carrying the S4 Mini for a week, I&amp;rsquo;ve realized a few things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I miss small phones. I don&amp;rsquo;t need a phone with a five inch screen for most things. I have an Android Wear watch, so a large portion of my interaction with my phone occurs via my wrist anyway.&lt;/li&gt;
&lt;li&gt;Doing Android development on a flagship phone blinds us to what most of our users (even more so for global apps) are experiencing. Who has phones that old/small/underpowered? Most people.&lt;/li&gt;
&lt;li&gt;Paraphrasing &lt;a href=&#34;https://www.youtube.com/watch?v=4YMNth3JF0M&#34;&gt;Tyler Durden&lt;/a&gt;, &amp;ldquo;You are not your smart phone.&amp;rdquo; Who cares what phone you have. A more interesting question is, &amp;ldquo;What do you do with it?&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So why am I &lt;a href=&#34;http://en.wiktionary.org/wiki/unironically&#34;&gt;unironically&lt;/a&gt; carrying this small, older Android phone? I think it will help me build better apps. And it may annoy me just enough to spend less time on my phone and more time experiencing the world around me.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MCE Conference 2015 - Automated Testing for Modern Android Applications</title>
      <link>http://andydyer.org/blog/2015/02/08/mce-conference-2015---automated-testing-for-modern-android-applications/</link>
      <pubDate>Sun, 08 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://andydyer.org/blog/2015/02/08/mce-conference-2015---automated-testing-for-modern-android-applications/</guid>
      <description>&lt;p&gt;It was an honor to speak at and attend &lt;a href=&#34;http://mceconf.com/&#34;&gt;MCE Conference&lt;/a&gt; in Warsaw last week. I participated in a workshop where I learned about prototyping with Android and Arduinos. I attended talks about Groovy, Kotlin, Proguard, design, scaling apps for emerging markets, and some handy new libraries.&lt;/p&gt;

&lt;p&gt;That alone easily makes MCE one of the best conferences I&amp;rsquo;ve been to. On top of all that, the networking with fellow speakers and attendees was a personal highlight. To everyone I met, I hope to stay in touch until our paths cross again. And I hope you caught up on your sleep!&lt;/p&gt;

&lt;p&gt;Here are the slides from my talk on Android testing. The sample app is available on &lt;a href=&#34;https://github.com/abdyer/android-test-demo&#34;&gt;GitHub&lt;/a&gt;. I previously gave this talk at the Big Android BBQ back in October. In preparation for MCE, I updated the slides and sample app to use Dagger 2 and Espresso 2.&lt;/p&gt;

&lt;p&gt;Testing on Android is still not as easy as it should be, but it is getting better. First class testing support is expected when Dagger 2 is ready for release. I can&amp;rsquo;t wait for the remaining roadblocks to be removed one by one.
&lt;p/&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;bb843936f2694612853dc525d0a76a75&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Running Shell Commands with Gradle and a Better Way to Delombok</title>
      <link>http://andydyer.org/blog/2015/01/22/running-shell-commands-with-gradle-and-a-better-way-to-delombok/</link>
      <pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://andydyer.org/blog/2015/01/22/running-shell-commands-with-gradle-and-a-better-way-to-delombok/</guid>
      <description>&lt;p&gt;A few months ago, I &lt;a href=&#34;http://andydyer.org/blog/2014/09/29/delombok-and-javadoc-with-gradle/&#34;&gt;posted&lt;/a&gt; about how to use Gradle tasks to &amp;ldquo;&lt;a href=&#34;http://projectlombok.org/features/delombok.html&#34;&gt;delombok&lt;/a&gt;&amp;rdquo; code using Lombok annotations before generating Javadocs. My solution for running the delombok task used Ant and was based on what I found after the requisite Google &amp;amp; StackOverflow searching. This worked just fine until Android Studio 1.0 and the associated Gradle build tools were released at the end of the year.&lt;/p&gt;

&lt;p&gt;The crux of the problem appeared to be a change in the way dependencies are merged during compilation. Countless &amp;ldquo;package does not exist errors&amp;rdquo; were causing the delombok task to fail. I first attempted to solve this by changing the way the classpath was built in the task. While I was able to reduce the number of errors, I didn&amp;rsquo;t succeed in completely fixing the problem. All the while, running the delombok task directly from the command line with &lt;code&gt;java -jar build-libs/lombok.jar delombok src -d build/src-delomboked&lt;/code&gt; ran successfully.&lt;/p&gt;

&lt;p&gt;Eventually, I decided to &lt;a href=&#34;http://c2.com/xp/DoTheSimplestThingThatCouldPossiblyWork.html&#34;&gt;do the simplest thing that could possibly work&lt;/a&gt;. This led me to learning how to use the &lt;a href=&#34;http://www.gradle.org/docs/current/dsl/org.gradle.api.tasks.Exec.html&#34;&gt;Exec&lt;/a&gt; command to run shell commands with Gradle tasks. The end result is below. It&amp;rsquo;s much more succinct and no longer subject to changes in Android Studio&amp;rsquo;s build process. The only non-obvious thing is that each part of the command must be quoted separately and comma-delimited.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;task delombok(type: Exec) {
    commandLine &#39;java&#39;, &#39;-jar&#39;, &#39;build-libs/lombok.jar&#39;, &#39;delombok&#39;, &#39;src&#39;, &#39;-d&#39;, &#39;build/src-delomboked&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I hope this saves someone some time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top 10 Albums of 2014</title>
      <link>http://andydyer.org/blog/2014/12/26/top-10-albums-of-2014/</link>
      <pubDate>Fri, 26 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://andydyer.org/blog/2014/12/26/top-10-albums-of-2014/</guid>
      <description>&lt;p&gt;The end of another year means it&amp;rsquo;s time for the annual Top 10 Favorite Albums list.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Ty Segall - Manipulator&lt;/strong&gt; While not the leader in sheer track plays via my Google Play Music account, this album is perfect all the way through. It certainly spent a lot of time on my turntable as well.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nothing - Guilty of Everything&lt;/strong&gt; A wonderful example of the specific brand of rock music I love. Heavily &lt;a href=&#34;https://www.youtube.com/watch?v=zhxXn60Z0yk&#34;&gt;MBV&lt;/a&gt; influenced wall of sound guitars. They were almost deafeningly loud when I saw them at &lt;a href=&#34;http://fitzlivemusic.com&#34;&gt;Fitzgerald&amp;rsquo;s&lt;/a&gt; over the summer.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Whirr - Sway&lt;/strong&gt; One of the members of Nothing also founded Whirr. As you might expect, they have a similar sound. Similarly awesome.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sturgill Simpson - Metamodern Sounds in Country Music&lt;/strong&gt; Like a modern day &lt;a href=&#34;https://www.youtube.com/watch?v=14ZHn_76QM0&#34;&gt;Waylon Jennings&lt;/a&gt;. While I&amp;rsquo;m not a big country fan, I can appreciate honest, heartfelt songs. These are.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spoon - They Want My Soul&lt;/strong&gt; Such a consistent band. Their sound evolves slightly with each album, yet they always sound like Spoon.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Meatbodies - Meatbodies&lt;/strong&gt; Ty Segall&amp;rsquo;s &lt;a href=&#34;https://www.youtube.com/watch?v=iDEmMyowfPU&#34;&gt;Fuzz&lt;/a&gt; band mate Chad Ubovich also helms Meatbodies. Psych rock, fuzz, reverb, etc. &lt;a href=&#34;https://www.youtube.com/watch?v=DuYOMvTLoJo&#34;&gt;Thee Oh Sees&lt;/a&gt;/Ty Segall type rock n&amp;rsquo; roll.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Parquet Courts - Sunbathing Animal&lt;/strong&gt; Their slacker rock sound reminds me a bit of &lt;a href=&#34;https://www.youtube.com/watch?v=lPvhKV3Yg2k&#34;&gt;Pavement&lt;/a&gt;. Simple yet catchy songs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cheatahs - Cheatahs&lt;/strong&gt; On par with the Nothing and Whirr albums on the list, more fuzzy droning shoegaze-y goodness.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Schoolboy Q - Oxymoron&lt;/strong&gt; I continued exploring hip-hop this year and this album led the pack. &amp;ldquo;Los Awesome&amp;rdquo; is like a modern day &amp;ldquo;&lt;a href=&#34;https://www.youtube.com/watch?v=uWbXQQG9B6c&#34;&gt;California Love&lt;/a&gt;&amp;rdquo;. &amp;ldquo;&lt;a href=&#34;https://www.youtube.com/watch?v=_L2vJEb6lVE&#34;&gt;Collard Greens&lt;/a&gt;&amp;rdquo; features Kendrick Lamar and name checks Houston. And more. What else do you need?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vince Staples - Hell Can Wait&lt;/strong&gt; Vince Staples has &lt;a href=&#34;https://www.youtube.com/watch?v=BGfE-mbdmXg&#34;&gt;collaborated with Earl Sweatshirt&lt;/a&gt; (whose &amp;ldquo;Doris&amp;rdquo; album was on my list last year) and toured this year with Schoolboy Q. Apparently my ear is also finely tuned for a specific style of hip-hop. Whatever the case, this album will get your head nodding if you&amp;rsquo;re into that sort of thing.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I made a YouTube playlist with one of my favorite songs from each album. Enjoy!&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/videoseries?list=PL4Qh67kwS0G6xBXF7IgmsAR_9772oiccJ&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Music Library 3.0 - Material Design Update</title>
      <link>http://andydyer.org/blog/2014/11/02/music-library-3.0---material-design-update/</link>
      <pubDate>Sun, 02 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://andydyer.org/blog/2014/11/02/music-library-3.0---material-design-update/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://andydyer.org/images/music_library_icon.png&#34; alt=&#34;Music Library&#34; style=&#34;width: 150px; float: left; margin-right: 20px&#34; /&gt;
I started developing &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.dandydev.medialibrary&#34;&gt;Music Library&lt;/a&gt; about four years ago when I wanted an app for organizing my record collection. Armed with my Nexus One, Eclipse, and a copy of Apress&amp;rsquo; &lt;a href=&#34;http://www.amazon.com/gp/product/1430246804/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1430246804&amp;amp;linkCode=as2&amp;amp;tag=slacod-20&amp;amp;linkId=FMLK73AOGDPPJEM3&#34;&gt;Pro Android&lt;/a&gt;, I spent my nights and weekends learning the inner workings of my now-favorite mobile OS.&lt;/p&gt;

&lt;p&gt;Over the years, Music Library has been a playground of sorts for exploring various open source libraries, patterns, and best practices. While there is still a fair amount of code I would write differently today (I&amp;rsquo;m looking at you, ContentProvider), the app has been and continues to be an enjoyable side project.&lt;/p&gt;

&lt;p&gt;Whether fixing bugs or implementing new features, I adhere to the &lt;a href=&#34;http://programmer.97things.oreilly.com/wiki/index.php/The_Boy_Scout_Rule&#34;&gt;Boy Scout Rule&lt;/a&gt; as much as possible, balancing the urge to rewrite everything with what makes sense for the changes being made. Despite my attempts at pragmatism, Google&amp;rsquo;s roughly semiannual overhaul of the Android UI has a way of quickly dating apps that do not keep up with the latest design guidelines. Remember gradients everywhere in Gingerbread? Or when Honeycomb and Holo ushered in the last big design change? &lt;a href=&#34;http://www.google.com/design/spec/material-design/introduction.html&#34;&gt;Material Design&lt;/a&gt; continues that tradition, only more ambitious in scope; this time unifying the design of mobile, web, and Chromebook apps in one fell swoop.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://googleblog.blogspot.com/2014/10/android-be-together-not-same.html&#34;&gt;official announcement&lt;/a&gt; of Lollipop and the release of the latest support library last month motivated me to update Music Library yet again to keep up with the latest evolution of the platform. After surveying the contents of the new version of the support library, I got to work bringing Material Design to the app.&lt;/p&gt;

&lt;p&gt;I started by applying the &lt;code&gt;Theme.AppCompat.Light.DarkActionBar&lt;/code&gt; theme as described on the &lt;a href=&#34;http://android-developers.blogspot.com/2014/10/appcompat-v21-material-design-for-pre.html&#34;&gt;Android Developers&lt;/a&gt; blog, which changed the action bar, color scheme, and widgets from the now too-familiar Holo electric blue to the new Material look.&lt;/p&gt;

&lt;p&gt;Once that was done, I found that the spinner navigation the app was using has been deprecated in Lollipop. Taking a cue from Google&amp;rsquo;s own apps such as Gmail and the Play Store, I decided to move the shelf list into a left navigation drawer. Menu options such as Scan Barcode, Settings, and editing the list of shelves also moved into the nav drawer. This left only the more common actions of Add, Edit, Search, and Sort in the action bar/overflow menu, cleaning things up significantly.&lt;/p&gt;

&lt;p&gt;From there, I turned to the album art images, making them more prominent throughout the app. I used the &lt;code&gt;GridLayoutManager&lt;/code&gt; and &lt;code&gt;CardView&lt;/code&gt; widget to display the list of albums in a grid rather than a list, putting the focus on the artwork that makes our favorite albums immediately recognizable. This had the additional benefit of obviating the coverflow view that while fun to play with, always felt a bit out of place on Android.&lt;/p&gt;

&lt;p&gt;To further enhance the look of the app, I used the &lt;a href=&#34;https://blog.stylingandroid.com/palette-part-2/&#34;&gt;Palette library&lt;/a&gt; to extract a dark vibrant color from each album&amp;rsquo;s artwork for the action bar and fonts. As the selected album changes, the app&amp;rsquo;s colors morph to complement the artwork. I&amp;rsquo;m amazed how well it works. I&amp;rsquo;ve yet to see a case where it didn&amp;rsquo;t result in just the right color for the image being displayed.&lt;/p&gt;

&lt;p&gt;As you can see from the before and after screen shots below, the redesign breathes new life into the app. I&amp;rsquo;m quite pleased with the result. I look forward to applying more Material Design elements to this app and others over the next few months.
&lt;br/&gt;
&lt;table style=&#34;margin-left: auto; margin-right: auto&#34;&gt;
  &lt;tr&gt;
    &lt;th&gt;Version 2.x (Holo)&lt;/th&gt;
    &lt;th&gt;Version 3.0 (Material Design)&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;a href=&#34;http://andydyer.org/images/music_library_title_list_v2.png&#34;&gt;&lt;img src=&#34;http://andydyer.org/images/music_library_title_list_v2.png&#34; alt=&#34;Title List v2.x&#34; style=&#34;width: 253px; margin-left: 20px; margin-right: 20px; margin-bottom:20px&#34; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href=&#34;http://andydyer.org/images/music_library_title_list_v3.png&#34;&gt;&lt;img src=&#34;http://andydyer.org/images/music_library_title_list_v3.png&#34; alt=&#34;Title List v3.0&#34; style=&#34;width: 253px; margin-right: 20px; margin-bottom: 20px&#34; /&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;a href=&#34;http://andydyer.org/images/music_library_title_edit_v2.png&#34;&gt;&lt;img src=&#34;http://andydyer.org/images/music_library_title_edit_v2.png&#34; alt=&#34;Title Edit v2.x&#34; style=&#34;width: 253px; margin-left:20px; margin-right: 20px; margin-bottom: 20px&#34; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href=&#34;http://andydyer.org/images/music_library_title_edit_v3.png&#34;&gt;&lt;img src=&#34;http://andydyer.org/images/music_library_title_edit_v3.png&#34; alt=&#34;Title Edit v3.0&#34; style=&#34;width: 253px; margin-right: 20px; margin-bottom: 20px&#34; /&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;
&lt;div style=&#34;text-align: center&#34;&gt;
    &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.dandydev.medialibrary&#34; title=&#34;Get Music Library&#34;&gt;
        &lt;img alt=&#34;Get it on Google Play&#34; width=&#34;203&#34; src=&#34;http://andydyer.org/images/google_play_badge@2x.png&#34;&gt;
    &lt;/a&gt;
&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BABBQ5 - Automated Testing for Modern Android Applications</title>
      <link>http://andydyer.org/blog/2014/10/17/babbq5---automated-testing-for-modern-android-applications/</link>
      <pubDate>Fri, 17 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://andydyer.org/blog/2014/10/17/babbq5---automated-testing-for-modern-android-applications/</guid>
      <description>&lt;p&gt;This is my third year to attend and present at the &lt;a href=&#34;http://www.bigandroidbbq.com/&#34;&gt;Big Android BBQ&lt;/a&gt;. &lt;a href=&#34;http://news.bigandroidbbq.com/2014/09/speaker-spotlight-andrew-dyer.html&#34;&gt;My talk&lt;/a&gt; this year showed how to prepare an Android app for automated testing using mocking, dependency injection, and Google&amp;rsquo;s super fast Espresso test runner. You can find the presentation on &lt;a href=&#34;https://speakerdeck.com/abdyer/babbq5-automated-testing-for-modern-android-applications&#34;&gt;Speaker Deck&lt;/a&gt; and the sample code on &lt;a href=&#34;https://github.com/abdyer/android-test-demo&#34;&gt;GitHub&lt;/a&gt;.
&lt;br/&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;10d2c2b039470132e0fd3e50d861d083&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hosting Android Dependencies on GitHub</title>
      <link>http://andydyer.org/blog/2014/10/05/hosting-android-dependencies-on-github/</link>
      <pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://andydyer.org/blog/2014/10/05/hosting-android-dependencies-on-github/</guid>
      <description>&lt;p&gt;As I mentioned in my &lt;a href=&#34;http://andydyer.org/blog/2014/09/29/delombok-and-javadoc-with-gradle/&#34;&gt;last post&lt;/a&gt;, I&amp;rsquo;m developing an SDK at work. The libraries I use most frequently in my apps are all included as Maven dependencies. Adding a line to my &lt;code&gt;build.gradle&lt;/code&gt; file is much preferred to downloading a JAR file. To make the SDK as easy as possible for developers to include in their projects, I wanted to deliver it the same way.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://central.sonatype.org/&#34;&gt;Maven Central&lt;/a&gt; is the de facto repository for open source library hosting. Since the SDK I&amp;rsquo;m developing is part of a product and as such will not be open source, I needed to find another place to host the binary that would still allow it to be included via Maven.&lt;/p&gt;

&lt;p&gt;Libraries hosted on Maven Central are included in &lt;code&gt;build.gradle&lt;/code&gt;with the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;repositories {
    mavenCentral()
}

dependencies {
    compile &#39;com.squareup.retrofit:retrofit:1.6.1&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Including another Maven source is as simple as adding its URL to the &lt;code&gt;repositories&lt;/code&gt; block and then including the group/artifact/version string as normal in the &lt;code&gt;dependencies&lt;/code&gt; block:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;repositories {
    mavenCentral()
    maven { url &amp;quot;https://raw.github.com/username/my-super-cool-sdk/master&amp;quot; }
}

dependencies {
    compile &#39;com.squareup.retrofit:retrofit:1.6.1&#39;
    compile &#39;com.username:my-super-cool-sdk:1.0.0&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But how do we actually prepare a library for Maven? This can be done in Gradle with the Maven plugin:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;apply plugin: &#39;maven&#39;

uploadArchives {
    repositories.mavenDeployer {
        def deployPath = file(getProperty(&#39;aar.deployPath&#39;))
        repository(url: &amp;quot;file://${deployPath.absolutePath}&amp;quot;)
        pom.project {
            groupId &#39;com.username&#39;
            artifactId &#39;my-super-cool-sdk&#39;
            version &amp;quot;1.0.0&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing to note is the call to &lt;code&gt;getProperty(&#39;aar.deployPath&#39;)&lt;/code&gt; above. This reads the value of the &lt;code&gt;aar.deployPath&lt;/code&gt; property in my &lt;code&gt;gradle.properties&lt;/code&gt; file. The library project is in a separate GitHub repository from the one where the SDK binary is hosted, so the deploy path property provides the relative path to the local destination directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;aar.deployPath=../../../../my-super-cool-sdk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once everything is in place, running &lt;code&gt;gradle uploadArchives&lt;/code&gt; exports the AAR binary and necessary POM/XML files to the target directory. From there, all that&amp;rsquo;s left to do is commit the files and push them to the SDK repository on GitHub.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Delombok and Javadoc with Gradle</title>
      <link>http://andydyer.org/blog/2014/09/29/delombok-and-javadoc-with-gradle/</link>
      <pubDate>Mon, 29 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://andydyer.org/blog/2014/09/29/delombok-and-javadoc-with-gradle/</guid>
      <description>&lt;p&gt;I recently had my first experience working with Javadoc to generate documentation for an SDK I&amp;rsquo;ve been developing at work. In general, I&amp;rsquo;m in the &amp;ldquo;&lt;a href=&#34;http://blog.codinghorror.com/coding-without-comments/&#34;&gt;clean code doesn&amp;rsquo;t need comments&lt;/a&gt;&amp;rdquo; camp, but SDKs tend to be a limited view into a larger abstraction, so good documentation is a necessity.&lt;/p&gt;

&lt;p&gt;Javadoc has been around since the introduction of the Java language, so I won&amp;rsquo;t include a primer here. If you want to learn more, &lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/documentation/javadoc-137458.html&#34;&gt;Oracle has you covered&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After adding the necessary documentation comments to the public-facing portions of the SDK, I naturally wanted a Gradle task to easily generate the documentation. The following will add tasks to generate Javadocs for each build type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;android.libraryVariants.all { variant -&amp;gt;
    task(&amp;quot;generate${variant.name.capitalize()}Javadoc&amp;quot;, type: Javadoc) {
        description &amp;quot;Generates Javadoc for $variant.name.&amp;quot;
        source = &#39;src/main/java&#39;
        ext.androidJar = &amp;quot;${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar&amp;quot;
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        options.links(&amp;quot;http://docs.oracle.com/javase/7/docs/api/&amp;quot;);
        options.links(&amp;quot;http://d.android.com/reference/&amp;quot;);

        // exclude generated files
        exclude &#39;**/BuildConfig.java&#39;
        exclude &#39;**/R.java&#39;

        // exclude any internal packages
        exclude &#39;**/com/acme/sdk/api/**&#39;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After adding the above to your &lt;code&gt;build.gradle&lt;/code&gt; file, generate your Javadocs from the command line with &lt;code&gt;gradle generateReleaseJavadoc&lt;/code&gt;. If you&amp;rsquo;re not using any annotation libraries to generate the mundane/boilerplate code in your application, this should be all you need. However, I highly recommend exploring how you can take advantage of some of these libraries.&lt;/p&gt;

&lt;p&gt;An annotation library I use in almost every project is &lt;a href=&#34;http://projectlombok.org/&#34;&gt;Lombok&lt;/a&gt;. Be forewarned that the unappealing web site belies the power of this library. As you can see from the &lt;a href=&#34;http://projectlombok.org/features/index.html&#34;&gt;feature list&lt;/a&gt;, it includes annotations for generating getters/setters, null checks, and much more. You&amp;rsquo;ll want to install the &lt;a href=&#34;http://plugins.jetbrains.com/plugin/6317&#34;&gt;Lombok Plugin&lt;/a&gt; for IntelliJ to eliminate misleading syntax errors when using these annotations in Android Studio.&lt;/p&gt;

&lt;p&gt;Assuming I&amp;rsquo;ve convinced you to try Lombok, you&amp;rsquo;ll eventually find that Javadoc comments on &lt;code&gt;@Getter&lt;/code&gt; annotated fields are missing in the generated documentation. This is because the annotated code is replaced with the generated code during compliation and Javadoc is run against the compiled code.&lt;/p&gt;

&lt;p&gt;To fix this, we need to &amp;ldquo;&lt;a href=&#34;http://projectlombok.org/features/delombok.html&#34;&gt;delombok&lt;/a&gt;&amp;rdquo; our code before running Javadoc on it. This involves running the &lt;code&gt;delombok&lt;/code&gt; command on the original source, copying the resulting code into a separate directory, and then running Javadoc on the delomboked directory. With Gradle, this is most easily done by adding a dependent delombok task to the Javadoc task above.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll also need to include &lt;code&gt;lombok.jar&lt;/code&gt; in your &lt;code&gt;libs&lt;/code&gt; directory in order to run the &lt;code&gt;delombok&lt;/code&gt; command. I include the Lombok library in my project via a Gradle dependency, but the task didn&amp;rsquo;t seem to find the command without the JAR file. I don&amp;rsquo;t have any other JAR files in my &lt;code&gt;libs&lt;/code&gt; directory and don&amp;rsquo;t include it in my build, so this was a pretty easy workaround. You can certainly put the JAR in another directory within your project and change the classpath in the task if needed.&lt;/p&gt;

&lt;p&gt;Once this has been done, the complete script is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;def srcJava = &#39;src/main/java&#39;
def srcDelomboked = &#39;build/src-delomboked/main/java&#39;

task delombok {
    inputs.files file(srcJava)
    outputs.dir file(srcDelomboked)

    doLast {
        FileCollection collection = files(configurations.compile)
        FileCollection sumTree = collection + fileTree(dir: &#39;bin&#39;)

        ant.taskdef(name: &#39;delombok&#39;, classname: &#39;lombok.delombok.ant.DelombokTask&#39;, classpath: &#39;libs/lombok.jar&#39;)
        ant.delombok(from:srcJava, to:srcDelomboked, classpath: sumTree.asPath)
    }
}

android.libraryVariants.all { variant -&amp;gt;
    task(&amp;quot;generate${variant.name.capitalize()}Javadoc&amp;quot;, type: Javadoc) {
        description &amp;quot;Generates Javadoc for $variant.name.&amp;quot;
        setDependsOn([&#39;delombok&#39;])
        source = srcDelomboked
        ext.androidJar = &amp;quot;${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar&amp;quot;
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        options.links(&amp;quot;http://docs.oracle.com/javase/7/docs/api/&amp;quot;);
        options.links(&amp;quot;http://d.android.com/reference/&amp;quot;);

        // exclude generated files
        exclude &#39;**/BuildConfig.java&#39;
        exclude &#39;**/R.java&#39;

        // exclude any internal packages
        exclude &#39;**/com/acme/sdk/api/**&#39;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running &lt;code&gt;gradle generateReleaseJavadoc&lt;/code&gt; will now delombok your code and then run Javadoc on the output.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android&#39;s Material Design and The Bauhaus</title>
      <link>http://andydyer.org/blog/2014/07/13/androids-material-design-and-the-bauhaus/</link>
      <pubDate>Sun, 13 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://andydyer.org/blog/2014/07/13/androids-material-design-and-the-bauhaus/</guid>
      <description>&lt;p&gt;Since Android Gingerbread (v2.3), loyalists know that each version has an Easter egg that can be accessed by repeatedly tapping the version number on the Settings &amp;gt; About screen. The Android &amp;ldquo;L&amp;rdquo; Preview is no exception.&lt;/p&gt;

&lt;p&gt;While test driving the new version, I naturally had to see what Google had hidden for me in their latest release. Previous versions have had everything from &lt;a href=&#34;https://www.youtube.com/watch?v=PeAFCIvqNxc&#34;&gt;gingerbread zombies&lt;/a&gt; to &lt;a href=&#34;https://www.youtube.com/watch?v=DfY73GBBHxg&#34;&gt;Nyandroids&lt;/a&gt; and a &lt;a href=&#34;https://www.youtube.com/watch?v=iN-nJdAJS7g&#34;&gt;pile of jelly beans&lt;/a&gt;. The Android &amp;ldquo;L&amp;rdquo; Preview build has a &lt;a href=&#34;https://www.youtube.com/watch?v=_He5MIYJas8&#34;&gt;simple animation of random overlapping red and blue rectangles&lt;/a&gt;. Several Android blogs mentioned this, but dismissed it as &lt;a href=&#34;http://www.androidcentral.com/android-l-Previews-easter-egg-webdriver-torso&#34;&gt;mysterious&lt;/a&gt; and &lt;a href=&#34;http://www.slashgear.com/hands-on-with-the-android-l-features-google-didnt-mention-27335613/&#34;&gt;strange&lt;/a&gt;. While these random rectangles are clearly the same used by Google&amp;rsquo;s &lt;a href=&#34;http://www.bbc.com/news/technology-27778071&#34;&gt;WebDriver Torso&lt;/a&gt; YouTube video quality testing, so far everyone seems to have missed the most obvious explanation.&lt;/p&gt;

&lt;p&gt;On my trip to Berlin to speak at &lt;a href=&#34;http://de.droidcon.com/2014/session/froyo-kitkat-two-years-developing-maintaining-deliradio&#34;&gt;DroidCon&lt;/a&gt; this past May, I visited the &lt;a href=&#34;http://www.bauhaus.de/de/bauhaus-archiv/&#34;&gt;Bauhaus Archive&lt;/a&gt;. There I learned quite a bit about the history of Germany&amp;rsquo;s world-renowned design school, including their study of basic shapes and primary colors. Among the many drawings, paintings, and other exhibits was this piece by &lt;a href=&#34;http://en.wikipedia.org/wiki/L%C3%A1szl%C3%B3_Moholy-Nagy&#34;&gt;Lásló Moholy-Nagy&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;div style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;http://bauhaus-online.de/en/atlas/werke/construction-z1&#34; title=&#34;Construction Z1&#34;&gt;&lt;img src=&#34;http://andydyer.org/images/moholy_nagy.jpg&#34; alt=&#34;Moholy-Nagy&#34; style=&#34;width: 467px;&#34; /&gt;&lt;/div&gt;&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Clearly, the Android &amp;ldquo;L&amp;rdquo; Preview Easter egg and Material Design itself are a nod to the Bauhaus&amp;rsquo; influence. It is the Bauhaus aesthetic made digital; layered [red](&lt;a href=&#34;http://cdn.androidpolice.com/wp-content/uploads/2014/06/nexusae0_Screenshot_&amp;quot;2014-06-26&amp;quot;&#34;&gt;http://cdn.androidpolice.com/wp-content/uploads/2014/06/nexusae0_Screenshot_&amp;quot;2014-06-26&amp;quot;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The real mystery is why a Google search for &amp;ldquo;&lt;a href=&#34;https://www.google.com/search?q=android+material+design+bauhaus&#34;&gt;android material design bauhaus&lt;/a&gt;&amp;rdquo; currently only returns a &lt;a href=&#34;http://www.ukessays.com/essays/cultural-studies/influence-of-the-bauhaus-on-design-cultural-studies-essay.php&#34;&gt;couple&lt;/a&gt; &lt;a href=&#34;http://forum.xda-developers.com/showthread.php?t=2794642&amp;amp;page=4&#34;&gt;results&lt;/a&gt; that make this connection. This is my attempt to make it at least three.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fun with Android Wear</title>
      <link>http://andydyer.org/blog/2014/07/12/fun-with-android-wear/</link>
      <pubDate>Sat, 12 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://andydyer.org/blog/2014/07/12/fun-with-android-wear/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://andydyer.org/images/deutschuhr_androidwear.png&#34; alt=&#34;Deutsch Uhr&#34; style=&#34;width: 140px; float: left; margin-right: 20px&#34; /&gt;I got my &lt;a href=&#34;https://play.google.com/store/devices/details?id=lg_g_watch_black&#34;&gt;LG G Android Wear&lt;/a&gt; smart watch earlier this week and dove right into developing for it.&lt;/p&gt;

&lt;p&gt;My first project was &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.dandydev.deutschuhr&#34;&gt;Deutsch Uhr&lt;/a&gt;, a text-based German language watch face inspired by &lt;a href=&#34;https://www.google.com/url?q=http://www.mypebblefaces.com/apps/1446/1484/&amp;amp;sa=D&amp;amp;usg=AFQjCNHn1MUA0IUtwhRwqFGHYKorEIcmLg&#34;&gt;my favorite Pebble watch face&lt;/a&gt;. I had fun adding animations for the hour/minute/day changes and learning what makes a Wear app tick (pun intended, I always do). A big thanks to my friend Daniel Ward for help getting started. Be sure to check out his &lt;a href=&#34;http://phandroid.com/2014/07/06/custom-android-wear-watch-faces-binary-clock/&#34;&gt;Binary Watch Face&lt;/a&gt;, which was the first Android Wear watch face to appear on Google Play a couple weeks ago.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://andydyer.org/images/wristpresenter_androidwear_next.png&#34; alt=&#34;Wrist Presenter&#34; style=&#34;width: 140px; float: right; margin-left: 10px&#34; /&gt;&lt;img src=&#34;http://andydyer.org/images/wristpresenter_androidwear.png&#34; alt=&#34;Wrist Presenter&#34; style=&#34;width: 140px; float: right; margin-left: 20px&#34; /&gt;I also released an update to &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.dandydev.wristpresenter&#34;&gt;Wrist Presenter for Android&lt;/a&gt; that adds Android Wear support. Combined with the &lt;a href=&#34;http://chrome.blogspot.com/2014/07/mirror-your-android-screen-to-tv-with.html&#34;&gt;Chromecast screen mirroring&lt;/a&gt; Google rolled out this week, the app should meet the needs of any Android-toting presenter. Way cool.&lt;/p&gt;

&lt;p&gt;The Pebble significantly reduced the need for me to pull out my phone for texts, calendar reminders, etc., but Android Wear has gone even further. How? While cooking in the kitchen, I tapped the watch screen and said &amp;ldquo;OK Google, set a timer for 10 minutes&amp;rdquo;. When the timer went off, I simply swiped it to dismiss. This also works for scheduling reminders. At the grocery store, my shopping list is on my wrist. Replying to a text message by talking to my watch makes me smile every time. And finally, I look forward to using Google Maps navigation on my watch when trying to find my way while traveling.&lt;/p&gt;

&lt;p&gt;The future is now, kids.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Google I/O 2014: An Android Developer&#39;s Perspective</title>
      <link>http://andydyer.org/blog/2014/06/28/google-i/o-2014-an-android-developers-perspective/</link>
      <pubDate>Sat, 28 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://andydyer.org/blog/2014/06/28/google-i/o-2014-an-android-developers-perspective/</guid>
      <description>

&lt;p&gt;This year’s &lt;a href=&#34;https://www.youtube.com/watch?v=wtLJPvx7-ys&#34;&gt;Google I/O&lt;/a&gt; developer conference once again gave developers plenty to be excited about. As expected, we heard about the next release of the Android operating system, Android Wear smart watches, and updated development tools. Rumored products &amp;amp; services such as Android TV, Android Auto, and Google Fit were also announced. Perhaps the most exciting and far-reaching announcement was the new Material Design language, which replaces the now dated looking Holo with a consistent look for all platforms. Enterprise users can now securely separate work &amp;amp; personal data with the Android Work suite of services. Finally, Android Cardboard showed us how to make a DIY version of an Oculus Rift style VR headset.&lt;/p&gt;

&lt;h5 id=&#34;android-l:4dd0d9862fb5d1a3651348f8fbcf95ce&#34;&gt;Android L&lt;/h5&gt;

&lt;p&gt;Keeping with the alphabetic naming tradition, the next Android version name will start with an “L”. Unlike past I/O conferences, Google surprised us all by not telling us what that “L” word is. Will it be “Lollipop” like most of us expect? Will it be something other than the traditional dessert? Or will they change to a completely different naming convention for the official release?&lt;/p&gt;

&lt;p&gt;Another change is the release of &lt;a href=&#34;http://developer.android.com/preview/index.html&#34;&gt;Android L as a preview&lt;/a&gt; rather than a finished release. Developers can start building apps to leverage the latest features, but we can expect to see some changes and improvements before the release this fall.&lt;/p&gt;

&lt;h5 id=&#34;android-wear:4dd0d9862fb5d1a3651348f8fbcf95ce&#34;&gt;Android Wear&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://developer.android.com/wear/index.html&#34;&gt;Android Wear&lt;/a&gt; was announced earlier this year as an emulator-only developer preview. At I/O, Google released the official Wear SDK and gave us a lot more guidance on how to build apps for the platform. In addition to the automatic bridging of notifications from an Android phone, we can now build apps that run on the phone itself. New APIs supporting two way communication between the phone and watch enable all sorts of new use cases. The first Android Wear watches from &lt;a href=&#34;https://play.google.com/store/devices/details?id=lg_g_watch_black&#34;&gt;LG&lt;/a&gt; and &lt;a href=&#34;https://play.google.com/store/devices/details?id=samsung_gear_live_black&#34;&gt;Samsung&lt;/a&gt; are now available for purchase, with the circular &lt;a href=&#34;https://moto360.motorola.com/&#34;&gt;Motorola 360&lt;/a&gt; coming next month.&lt;/p&gt;

&lt;h5 id=&#34;android-studio:4dd0d9862fb5d1a3651348f8fbcf95ce&#34;&gt;Android Studio&lt;/h5&gt;

&lt;p&gt;Despite being available since last year’s I/O conference, &lt;a href=&#34;http://developer.android.com/sdk/installing/studio.html&#34;&gt;Android Studio&lt;/a&gt; finally graduated from alpha to beta status. I’ve been using Android Studio as my primary IDE since its initial announcement and each update seems to add something I didn’t know I needed yet can’t live without. An improved layout designer, tighter Gradle integration, and various other updates continue to improve the Android development experience.&lt;/p&gt;

&lt;h5 id=&#34;android-tv-android-auto:4dd0d9862fb5d1a3651348f8fbcf95ce&#34;&gt;Android TV &amp;amp; Android Auto&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://developer.android.com/tv/index.html&#34;&gt;Android TV&lt;/a&gt; and &lt;a href=&#34;http://developer.android.com/auto/index.html&#34;&gt;Android Auto&lt;/a&gt; are bringing the platform into our cars and living rooms. Developers can now build apps for these using the same tools used for mobile apps. Of course, TVs and cars require different modes of interaction than a more personal device such as a phone or tablet. On the TV, voice or a remote control are used to browse and select content. In the car, the driver’s attention should be on the road, so voice, touch screen, or steering wheel input are used to control music, navigation, etc.&lt;/p&gt;

&lt;h5 id=&#34;google-fit:4dd0d9862fb5d1a3651348f8fbcf95ce&#34;&gt;Google Fit&lt;/h5&gt;

&lt;p&gt;Much like Apple’s HealthKit, &lt;a href=&#34;https://developers.google.com/fit/&#34;&gt;Google Fit&lt;/a&gt; is a set of services for building health &amp;amp; fitness apps. The SDK will be available this fall, so we can expect to hear a lot more about this in the next few months.&lt;/p&gt;

&lt;h5 id=&#34;material-design:4dd0d9862fb5d1a3651348f8fbcf95ce&#34;&gt;Material Design&lt;/h5&gt;

&lt;p&gt;Holo’s electric blue laced design language served it well over the past couple of years, but I was thrilled to see &lt;a href=&#34;http://developer.android.com/preview/material/index.html&#34;&gt;Material Design&lt;/a&gt; unveiled. From the handful of talks I watched, it was clear that Google’s design team put a lot of effort into the new design language. Lighting &amp;amp; shadow studies, 3D paper models, and user research were just a few of the tools used in their process. The result is a clean, modern design that fits in among current design trends without borrowing too heavily from any of them. Elevated/floating action buttons, layered views with shadows, and animated transitions are just a few of the hallmarks of the new design.&lt;/p&gt;

&lt;h5 id=&#34;enterprise-features:4dd0d9862fb5d1a3651348f8fbcf95ce&#34;&gt;Enterprise Features&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://www.androidcentral.com/android-work-makes-android-enterprise-ready&#34;&gt;Android Work&lt;/a&gt; delivers a new suite of must-have enterprise features such as separate work &amp;amp; personal accounts, IT administration of profiles &amp;amp; polices, Bring Your Own Device (BYOD) support, and internally hosted app distribution. Much of this comes from the incorporation of features from &lt;a href=&#34;http://www.samsung.com/global/business/mobile/platform/mobile-platform/knox/&#34;&gt;Samsung’s Knox platform&lt;/a&gt;. In addition to fine-grained control of security and apps, native rendering of MS Office documents was also added, bolstering Android’s position in the enterprise space.&lt;/p&gt;

&lt;h5 id=&#34;android-cardboard:4dd0d9862fb5d1a3651348f8fbcf95ce&#34;&gt;Android Cardboard&lt;/h5&gt;

&lt;p&gt;To wrap up the keynote, Sundar Pichai launched into the typical &lt;a href=&#34;https://www.youtube.com/watch?v=XcI-rHO0yko&#34;&gt;Oprah style gift giving&lt;/a&gt; session. Attendees were given their choice of Android Wear watch from Samsung or LG and will also receive the Motorola 360 when it becomes available. They were also given a mysterious piece of cardboard that wasn’t explained in the keynote itself. Thankfully, news spreads instantly via the internet and we quickly learned that “Cardboard” is a do-it-yourself kit for building a set of smartphone powered virtual reality glasses. Visit &lt;a href=&#34;https://developers.google.com/cardboard&#34;&gt;https://developers.google.com/cardboard&lt;/a&gt; to see what the assembled kit looks like and to download plans for building your own.&lt;/p&gt;

&lt;h5 id=&#34;conclusion:4dd0d9862fb5d1a3651348f8fbcf95ce&#34;&gt;Conclusion&lt;/h5&gt;

&lt;p&gt;As in previous years, Google I/O 2014 revealed a dizzying array of products &amp;amp; services, tools, and developer content. The forthcoming Android L release and its Material Design are a nice update to the world’s most popular mobile operating system. Android Wear, Auto, and TV extend the platform’s reach beyond phones and tablets. Android Work makes it even easier to use the same devices at work while keeping enterprise data secure. And clearly, &lt;a href=&#34;http://techcrunch.com/2014/03/25/facebook-to-buy-oculus-vr-maker-of-the-rift-headset-for-around-2b-in-cash-and-stock/&#34;&gt;Facebook paid way too much&lt;/a&gt; for Oculus Rift.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Originally posted on the &lt;a href=&#34;http://chaione.com/google-io-2014-a-developers-perspective/&#34;&gt;ChaiOne blog&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>