<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apps on Andy Dyer</title>
    <link>http://andydyer.org/categories/apps/</link>
    <description>Recent content in Apps on Andy Dyer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2015 Copyright Andy Dyer</copyright>
    <lastBuildDate>Sun, 28 Jun 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://andydyer.org/categories/apps/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using a Third Party FAB with CoordinatorLayout</title>
      <link>http://andydyer.org/blog/2015/06/28/using-a-third-party-fab-with-coordinatorlayout/</link>
      <pubDate>Sun, 28 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://andydyer.org/blog/2015/06/28/using-a-third-party-fab-with-coordinatorlayout/</guid>
      <description>&lt;p&gt;Before the Design Support Library was announced at Google I/O last month, I had numerous third party libraries in my projects for various elements of Material Design. I&amp;rsquo;ve enjoyed replacing the nav drawer, tabs, and parallax scrolling libraries with their support library counterparts. However, on one of my projects, we needed an expanding floating action button (FAB) similar to the one in &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.google.android.apps.inbox&#34;&gt;Inbox&lt;/a&gt;, which the support library does not currently provide.&lt;/p&gt;

&lt;p&gt;I chose &lt;a href=&#34;https://github.com/futuresimple/android-floating-action-button&#34;&gt;this&lt;/a&gt; FAB library since it includes a cool little animation from the plus sign to the &amp;ldquo;X&amp;rdquo; when expanding the menu. I foolishly thought I could just drop this into a CoordinatorLayout in place of the support library&amp;rsquo;s FAB. If you&amp;rsquo;ve checked out Chris Banes&amp;rsquo; excellent &lt;a href=&#34;https://github.com/chrisbanes/cheesesquare&#34;&gt;Cheesesquare&lt;/a&gt; sample, you might have noticed the &lt;code&gt;app:layout_anchor&lt;/code&gt; and &lt;code&gt;app:layout_anchorGravity&lt;/code&gt; attributes defined on the &lt;code&gt;FloatingActionButton&lt;/code&gt; element:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;android.support.design.widget.FloatingActionButton
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:layout_width=&amp;quot;wrap_content&amp;quot;
        app:layout_anchor=&amp;quot;@id/appbar&amp;quot;
        app:layout_anchorGravity=&amp;quot;bottom|right|end&amp;quot;
        android:src=&amp;quot;@drawable/ic_discuss&amp;quot;
        android:layout_margin=&amp;quot;@dimen/fab_margin&amp;quot;
        android:clickable=&amp;quot;true&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These two attributes are what tells the enclosing &lt;code&gt;CoordinatorLayout&lt;/code&gt; how to position the button and how it should behave when scrolling. To investigate how they are used, I used the good ol&amp;rsquo; &lt;code&gt;⌘+B&lt;/code&gt; shortcut to go to the &lt;code&gt;FloatingActionButton&lt;/code&gt;&amp;rsquo;s class definition. While the support library is not open source, I was still able to view the decompiled source.&lt;/p&gt;

&lt;p&gt;The first thing I noticed is the &lt;code&gt;@DefaultBehavior(FloatingActionButton.Behavior.class)&lt;/code&gt; annotation at the top of the class. The &lt;code&gt;FloatingActionButton.Behavior&lt;/code&gt; child class provides the &lt;code&gt;Behavior&lt;/code&gt; implementation used by &lt;code&gt;CoordinatorLayout&lt;/code&gt;. I copied and pasted this inner class into my own subclass of the third party library&amp;rsquo;s &lt;code&gt;FloatingActionsMenu&lt;/code&gt; class, updated the generic type, and started resolving the compile errors. It didn&amp;rsquo;t take me long to realize that several package private classes and methods were being called in this code. There are two ways to solve this. One is to copy the decompiled source of these classes into my project, but there is still the &lt;code&gt;AppBarLayout&lt;/code&gt;&amp;rsquo;s package private &lt;code&gt;getMinimumHeightForVisibleOverlappingContent()&lt;/code&gt; method to deal with. A simpler, yet slightly hackish way to handle this is to just define our class in a &lt;code&gt;android.support.design.widget&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;The last issue specific to this library is that its measured height includes its children, so the FAB is not correctly positioned on the edge of the image and content views. After a bit of experimentation, I solved this by overriding &lt;code&gt;onMeasure()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Override
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
    super.onMeasure(widthMeasureSpec, heightMeasureSpec);
    // measured height includes child views, so translate Y to align FAB on view edges
    if (getTranslationY() == 0) {
        View fab = getChildAt(getChildCount() - 1); // last child is the FAB
        int shadowRadius = getResources().getDimensionPixelSize(R.dimen.fab_shadow_radius);
        int offset = (getMeasuredHeight() - fab.getMeasuredHeight() + shadowRadius) / 2;
        ViewCompat.setTranslationY(this, offset);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/abdyer/cheesesquare/blob/master/app/src/main/java/android/support/design/widget/SupportFloatingActionsMenu.java&#34;&gt;source&lt;/a&gt; for &lt;code&gt;SupportFloatingActionsMenu&lt;/code&gt; is on GitHub in &lt;a href=&#34;https://github.com/abdyer/cheesesquare&#34;&gt;my Cheesesquare fork&lt;/a&gt;. Hopefully we&amp;rsquo;ll see first class support for integrating alternate FAB implementations more cleanly with the support library soon.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a screen shot of the end result:&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://andydyer.org/images/cheesesquare_fab_menu.png&#34; alt=&#34;Cheesesquare FAB menu&#34; style=&#34;width: 405px; margin-left: auto; margin-right: auto; display: block&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Loading a List of Objects from Firebase</title>
      <link>http://andydyer.org/blog/2015/04/06/loading-a-list-of-objects-from-firebase/</link>
      <pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://andydyer.org/blog/2015/04/06/loading-a-list-of-objects-from-firebase/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been working with &lt;a href=&#34;https://www.firebase.com/&#34;&gt;Firebase&lt;/a&gt; lately in preparation for adding data synchronization to my &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.dandydev.medialibrary&#34;&gt;Music Library&lt;/a&gt; app. Their &lt;a href=&#34;https://www.firebase.com/docs/android/quickstart.html&#34;&gt;docs&lt;/a&gt; did a great job of getting me set up. Using the &lt;a href=&#34;https://github.com/firebase/firebase-login-demo-android&#34;&gt;sample app&lt;/a&gt; as a guide, I even got Google+ OAuth working without much trouble. From there, it didn&amp;rsquo;t take long to load data into a Firebase instance partitioned by Google account. All that was left was to query the data out of Firebase and I&amp;rsquo;d be able to see the sync magic in action.&lt;/p&gt;

&lt;p&gt;As you probably guessed from the title of this post, fetching a collection of objects from Firebase was not quite as straightforward. The documentation on &lt;a href=&#34;https://www.firebase.com/docs/android/guide/retrieving-data.html&#34;&gt;retrieving data&lt;/a&gt; covers the methods for executing asynchronous queries, but uses HashMap results instead of the objects I initially stored. Um&amp;hellip;no thanks.&lt;/p&gt;

&lt;p&gt;I eventually noticed an overload of the &lt;code&gt;getValue()&lt;/code&gt; method  of the &lt;code&gt;DataSnapshot&lt;/code&gt; class that takes a &lt;code&gt;GenericTypeIndicator&amp;lt;T&amp;gt;&lt;/code&gt; parameter. In the &lt;a href=&#34;https://www.firebase.com/docs/java-api/javadoc/com/firebase/client/GenericTypeIndicator.html&#34;&gt;JavaDocs&lt;/a&gt; for that class, is the secret sauce:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;GenericTypeIndicator&amp;lt;List&amp;lt;Beer&amp;gt;&amp;gt; typeIndicator = new GenericTypeIndicator&amp;lt;List&amp;lt;Beer&amp;gt;&amp;gt;() {};
List&amp;lt;Beer&amp;gt; beers = snapshot.getValue(typeIndicator);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
Combining that with &lt;a href=&#34;https://gist.github.com/gsoltis/86210e3259dcc6998801&#34;&gt;these&lt;/a&gt; awesome RxJava Firebase bindings, I can now load a list with something as simple as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private Observable&amp;lt;List&amp;lt;Beer&amp;gt;&amp;gt; loadBeers() {
    Firebase firebase = new Firebase(&amp;quot;https://some-instance.firebaseio.com/beers&amp;quot;);
    GenericTypeIndicator&amp;lt;List&amp;lt;Beer&amp;gt;&amp;gt; typeIndicator = new GenericTypeIndicator&amp;lt;List&amp;lt;Beer&amp;gt;&amp;gt;() {};
    return RxFirebase.observe(firebase.orderByKey())
        .map(snapshot -&amp;gt; snapshot.getValue(typeIndicator));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aside from this little hiccup, Firebase is hard to beat for easy persistence that automatically syncs across devices. I look forward to seeing what [Google](&lt;a href=&#34;https://www.firebase.com/blog/&amp;quot;2014-10-21&amp;quot;&#34;&gt;https://www.firebase.com/blog/&amp;quot;2014-10-21&amp;quot;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why I&#39;m Unironically Carrying This Small, Older Android Phone</title>
      <link>http://andydyer.org/blog/2015/02/19/why-im-unironically-carrying-this-small-older-android-phone/</link>
      <pubDate>Thu, 19 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://andydyer.org/blog/2015/02/19/why-im-unironically-carrying-this-small-older-android-phone/</guid>
      <description>&lt;p&gt;I thoroughly enjoyed my last night in Berlin a little over a week ago; so much that I didn&amp;rsquo;t notice my phone was missing until the end of the night. Shake your head and say it couldn&amp;rsquo;t happen to you. I thought the same thing until it did. Normally, I keep my phone in one of my front pockets, but I was wearing a coat that covered the pocket, making it a bit more difficult to grab my phone quickly to check Google Maps. Since my coat has a side access pocket in the chest, I stowed my phone there while walking around. I&amp;rsquo;m guessing a skillful thief at the last bar spotted my phone in that side pocket and was able to slide it out without me knowing. I was in a crowded room and often looking to one side as I talked to different people. Self-shaming thoughts aside, sometimes it happens.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pro Tip: When traveling abroad, keep your main SIM card with your luggage at your hotel/rental. Buy a local SIM if possible for faster data. Losing my phone but not my main SIM card made a bad situation a bit better.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once I noticed my phone was missing, I faced all manner of unusual challenges. Did I remember the address of my AirBnB flat? How will I wake up on time for my train in the morning without an alarm? How will I get to the train station? Luckily I was able to get back to the flat without a problem. I did wake up too late for my train the next morning, but had no problem navigating to the train station after checking the route on my laptop before leaving.&lt;/p&gt;

&lt;p&gt;I arrived at the train station and learned that there was another train a couple hours later. Not bad. This gave me time to grab a flat white &amp;amp; croissant and then do some phone shopping. With the self-shaming level still high, I decided I didn&amp;rsquo;t want to spend more than 200€ on a (possibly temporary) replacement. At that price level, a &lt;a href=&#34;http://www.samsung.com/uk/consumer/mobile-devices/smartphones/android/GT-I9195ZKABTU&#34;&gt;Samsung Galaxy S4 Mini&lt;/a&gt; was pretty much my only choice. It shipped with KitKat (4.4.2) and withholding &lt;a href=&#34;http://www.androidpolice.com/wp-content/uploads/2013/02/nexusae0_182.png&#34;&gt;Samsung&amp;rsquo;s TouchWiz UI nonsense&lt;/a&gt;, it&amp;rsquo;s proven to be a pretty decent little phone. Installing the &lt;a href=&#34;http://www.cyanogenmod.org/&#34;&gt;CyanogenMod&lt;/a&gt; 12 ROM got me a stock Android UI and that &lt;a href=&#34;http://andydyer.org/images/lollipop.jpg&#34;&gt;sweet, sweet Lollipop&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The more technically savvy among you may ask whether I was able to track my device using the Android Device Manager. This is all it&amp;rsquo;s shown for the past week:
&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://andydyer.org/images/android_device_manager.png&#34; alt=&#34;Android Device Manager&#34; style=&#34;width: 827px; margin-left: auto; margin-right: auto; display: block&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
After carrying the S4 Mini for a week, I&amp;rsquo;ve realized a few things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I miss small phones. I don&amp;rsquo;t need a phone with a five inch screen for most things. I have an Android Wear watch, so a large portion of my interaction with my phone occurs via my wrist anyway.&lt;/li&gt;
&lt;li&gt;Doing Android development on a flagship phone blinds us to what most of our users (even more so for global apps) are experiencing. Who has phones that old/small/underpowered? Most people.&lt;/li&gt;
&lt;li&gt;Paraphrasing &lt;a href=&#34;https://www.youtube.com/watch?v=4YMNth3JF0M&#34;&gt;Tyler Durden&lt;/a&gt;, &amp;ldquo;You are not your smart phone.&amp;rdquo; Who cares what phone you have. A more interesting question is, &amp;ldquo;What do you do with it?&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So why am I &lt;a href=&#34;http://en.wiktionary.org/wiki/unironically&#34;&gt;unironically&lt;/a&gt; carrying this small, older Android phone? I think it will help me build better apps. And it may annoy me just enough to spend less time on my phone and more time experiencing the world around me.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Music Library 3.0 - Material Design Update</title>
      <link>http://andydyer.org/blog/2014/11/02/music-library-3.0---material-design-update/</link>
      <pubDate>Sun, 02 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://andydyer.org/blog/2014/11/02/music-library-3.0---material-design-update/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://andydyer.org/images/music_library_icon.png&#34; alt=&#34;Music Library&#34; style=&#34;width: 150px; float: left; margin-right: 20px&#34; /&gt;
I started developing &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.dandydev.medialibrary&#34;&gt;Music Library&lt;/a&gt; about four years ago when I wanted an app for organizing my record collection. Armed with my Nexus One, Eclipse, and a copy of Apress&amp;rsquo; &lt;a href=&#34;http://www.amazon.com/gp/product/1430246804/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1430246804&amp;amp;linkCode=as2&amp;amp;tag=slacod-20&amp;amp;linkId=FMLK73AOGDPPJEM3&#34;&gt;Pro Android&lt;/a&gt;, I spent my nights and weekends learning the inner workings of my now-favorite mobile OS.&lt;/p&gt;

&lt;p&gt;Over the years, Music Library has been a playground of sorts for exploring various open source libraries, patterns, and best practices. While there is still a fair amount of code I would write differently today (I&amp;rsquo;m looking at you, ContentProvider), the app has been and continues to be an enjoyable side project.&lt;/p&gt;

&lt;p&gt;Whether fixing bugs or implementing new features, I adhere to the &lt;a href=&#34;http://programmer.97things.oreilly.com/wiki/index.php/The_Boy_Scout_Rule&#34;&gt;Boy Scout Rule&lt;/a&gt; as much as possible, balancing the urge to rewrite everything with what makes sense for the changes being made. Despite my attempts at pragmatism, Google&amp;rsquo;s roughly semiannual overhaul of the Android UI has a way of quickly dating apps that do not keep up with the latest design guidelines. Remember gradients everywhere in Gingerbread? Or when Honeycomb and Holo ushered in the last big design change? &lt;a href=&#34;http://www.google.com/design/spec/material-design/introduction.html&#34;&gt;Material Design&lt;/a&gt; continues that tradition, only more ambitious in scope; this time unifying the design of mobile, web, and Chromebook apps in one fell swoop.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://googleblog.blogspot.com/2014/10/android-be-together-not-same.html&#34;&gt;official announcement&lt;/a&gt; of Lollipop and the release of the latest support library last month motivated me to update Music Library yet again to keep up with the latest evolution of the platform. After surveying the contents of the new version of the support library, I got to work bringing Material Design to the app.&lt;/p&gt;

&lt;p&gt;I started by applying the &lt;code&gt;Theme.AppCompat.Light.DarkActionBar&lt;/code&gt; theme as described on the &lt;a href=&#34;http://android-developers.blogspot.com/2014/10/appcompat-v21-material-design-for-pre.html&#34;&gt;Android Developers&lt;/a&gt; blog, which changed the action bar, color scheme, and widgets from the now too-familiar Holo electric blue to the new Material look.&lt;/p&gt;

&lt;p&gt;Once that was done, I found that the spinner navigation the app was using has been deprecated in Lollipop. Taking a cue from Google&amp;rsquo;s own apps such as Gmail and the Play Store, I decided to move the shelf list into a left navigation drawer. Menu options such as Scan Barcode, Settings, and editing the list of shelves also moved into the nav drawer. This left only the more common actions of Add, Edit, Search, and Sort in the action bar/overflow menu, cleaning things up significantly.&lt;/p&gt;

&lt;p&gt;From there, I turned to the album art images, making them more prominent throughout the app. I used the &lt;code&gt;GridLayoutManager&lt;/code&gt; and &lt;code&gt;CardView&lt;/code&gt; widget to display the list of albums in a grid rather than a list, putting the focus on the artwork that makes our favorite albums immediately recognizable. This had the additional benefit of obviating the coverflow view that while fun to play with, always felt a bit out of place on Android.&lt;/p&gt;

&lt;p&gt;To further enhance the look of the app, I used the &lt;a href=&#34;https://blog.stylingandroid.com/palette-part-2/&#34;&gt;Palette library&lt;/a&gt; to extract a dark vibrant color from each album&amp;rsquo;s artwork for the action bar and fonts. As the selected album changes, the app&amp;rsquo;s colors morph to complement the artwork. I&amp;rsquo;m amazed how well it works. I&amp;rsquo;ve yet to see a case where it didn&amp;rsquo;t result in just the right color for the image being displayed.&lt;/p&gt;

&lt;p&gt;As you can see from the before and after screen shots below, the redesign breathes new life into the app. I&amp;rsquo;m quite pleased with the result. I look forward to applying more Material Design elements to this app and others over the next few months.
&lt;br/&gt;
&lt;table style=&#34;margin-left: auto; margin-right: auto&#34;&gt;
  &lt;tr&gt;
    &lt;th&gt;Version 2.x (Holo)&lt;/th&gt;
    &lt;th&gt;Version 3.0 (Material Design)&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;a href=&#34;http://andydyer.org/images/music_library_title_list_v2.png&#34;&gt;&lt;img src=&#34;http://andydyer.org/images/music_library_title_list_v2.png&#34; alt=&#34;Title List v2.x&#34; style=&#34;width: 253px; margin-left: 20px; margin-right: 20px; margin-bottom:20px&#34; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href=&#34;http://andydyer.org/images/music_library_title_list_v3.png&#34;&gt;&lt;img src=&#34;http://andydyer.org/images/music_library_title_list_v3.png&#34; alt=&#34;Title List v3.0&#34; style=&#34;width: 253px; margin-right: 20px; margin-bottom: 20px&#34; /&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;a href=&#34;http://andydyer.org/images/music_library_title_edit_v2.png&#34;&gt;&lt;img src=&#34;http://andydyer.org/images/music_library_title_edit_v2.png&#34; alt=&#34;Title Edit v2.x&#34; style=&#34;width: 253px; margin-left:20px; margin-right: 20px; margin-bottom: 20px&#34; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href=&#34;http://andydyer.org/images/music_library_title_edit_v3.png&#34;&gt;&lt;img src=&#34;http://andydyer.org/images/music_library_title_edit_v3.png&#34; alt=&#34;Title Edit v3.0&#34; style=&#34;width: 253px; margin-right: 20px; margin-bottom: 20px&#34; /&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;
&lt;div style=&#34;text-align: center&#34;&gt;
    &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.dandydev.medialibrary&#34; title=&#34;Get Music Library&#34;&gt;
        &lt;img alt=&#34;Get it on Google Play&#34; width=&#34;203&#34; src=&#34;http://andydyer.org/images/google_play_badge@2x.png&#34;&gt;
    &lt;/a&gt;
&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android&#39;s Material Design and The Bauhaus</title>
      <link>http://andydyer.org/blog/2014/07/13/androids-material-design-and-the-bauhaus/</link>
      <pubDate>Sun, 13 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://andydyer.org/blog/2014/07/13/androids-material-design-and-the-bauhaus/</guid>
      <description>&lt;p&gt;Since Android Gingerbread (v2.3), loyalists know that each version has an Easter egg that can be accessed by repeatedly tapping the version number on the Settings &amp;gt; About screen. The Android &amp;ldquo;L&amp;rdquo; Preview is no exception.&lt;/p&gt;

&lt;p&gt;While test driving the new version, I naturally had to see what Google had hidden for me in their latest release. Previous versions have had everything from &lt;a href=&#34;https://www.youtube.com/watch?v=PeAFCIvqNxc&#34;&gt;gingerbread zombies&lt;/a&gt; to &lt;a href=&#34;https://www.youtube.com/watch?v=DfY73GBBHxg&#34;&gt;Nyandroids&lt;/a&gt; and a &lt;a href=&#34;https://www.youtube.com/watch?v=iN-nJdAJS7g&#34;&gt;pile of jelly beans&lt;/a&gt;. The Android &amp;ldquo;L&amp;rdquo; Preview build has a &lt;a href=&#34;https://www.youtube.com/watch?v=_He5MIYJas8&#34;&gt;simple animation of random overlapping red and blue rectangles&lt;/a&gt;. Several Android blogs mentioned this, but dismissed it as &lt;a href=&#34;http://www.androidcentral.com/android-l-Previews-easter-egg-webdriver-torso&#34;&gt;mysterious&lt;/a&gt; and &lt;a href=&#34;http://www.slashgear.com/hands-on-with-the-android-l-features-google-didnt-mention-27335613/&#34;&gt;strange&lt;/a&gt;. While these random rectangles are clearly the same used by Google&amp;rsquo;s &lt;a href=&#34;http://www.bbc.com/news/technology-27778071&#34;&gt;WebDriver Torso&lt;/a&gt; YouTube video quality testing, so far everyone seems to have missed the most obvious explanation.&lt;/p&gt;

&lt;p&gt;On my trip to Berlin to speak at &lt;a href=&#34;http://de.droidcon.com/2014/session/froyo-kitkat-two-years-developing-maintaining-deliradio&#34;&gt;DroidCon&lt;/a&gt; this past May, I visited the &lt;a href=&#34;http://www.bauhaus.de/de/bauhaus-archiv/&#34;&gt;Bauhaus Archive&lt;/a&gt;. There I learned quite a bit about the history of Germany&amp;rsquo;s world-renowned design school, including their study of basic shapes and primary colors. Among the many drawings, paintings, and other exhibits was this piece by &lt;a href=&#34;http://en.wikipedia.org/wiki/L%C3%A1szl%C3%B3_Moholy-Nagy&#34;&gt;Lásló Moholy-Nagy&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;div style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;http://bauhaus-online.de/en/atlas/werke/construction-z1&#34; title=&#34;Construction Z1&#34;&gt;&lt;img src=&#34;http://andydyer.org/images/moholy_nagy.jpg&#34; alt=&#34;Moholy-Nagy&#34; style=&#34;width: 467px;&#34; /&gt;&lt;/div&gt;&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Clearly, the Android &amp;ldquo;L&amp;rdquo; Preview Easter egg and Material Design itself are a nod to the Bauhaus&amp;rsquo; influence. It is the Bauhaus aesthetic made digital; layered [red](&lt;a href=&#34;http://cdn.androidpolice.com/wp-content/uploads/2014/06/nexusae0_Screenshot_&amp;quot;2014-06-26&amp;quot;&#34;&gt;http://cdn.androidpolice.com/wp-content/uploads/2014/06/nexusae0_Screenshot_&amp;quot;2014-06-26&amp;quot;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The real mystery is why a Google search for &amp;ldquo;&lt;a href=&#34;https://www.google.com/search?q=android+material+design+bauhaus&#34;&gt;android material design bauhaus&lt;/a&gt;&amp;rdquo; currently only returns a &lt;a href=&#34;http://www.ukessays.com/essays/cultural-studies/influence-of-the-bauhaus-on-design-cultural-studies-essay.php&#34;&gt;couple&lt;/a&gt; &lt;a href=&#34;http://forum.xda-developers.com/showthread.php?t=2794642&amp;amp;page=4&#34;&gt;results&lt;/a&gt; that make this connection. This is my attempt to make it at least three.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fun with Android Wear</title>
      <link>http://andydyer.org/blog/2014/07/12/fun-with-android-wear/</link>
      <pubDate>Sat, 12 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://andydyer.org/blog/2014/07/12/fun-with-android-wear/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://andydyer.org/images/deutschuhr_androidwear.png&#34; alt=&#34;Deutsch Uhr&#34; style=&#34;width: 140px; float: left; margin-right: 20px&#34; /&gt;I got my &lt;a href=&#34;https://play.google.com/store/devices/details?id=lg_g_watch_black&#34;&gt;LG G Android Wear&lt;/a&gt; smart watch earlier this week and dove right into developing for it.&lt;/p&gt;

&lt;p&gt;My first project was &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.dandydev.deutschuhr&#34;&gt;Deutsch Uhr&lt;/a&gt;, a text-based German language watch face inspired by &lt;a href=&#34;https://www.google.com/url?q=http://www.mypebblefaces.com/apps/1446/1484/&amp;amp;sa=D&amp;amp;usg=AFQjCNHn1MUA0IUtwhRwqFGHYKorEIcmLg&#34;&gt;my favorite Pebble watch face&lt;/a&gt;. I had fun adding animations for the hour/minute/day changes and learning what makes a Wear app tick (pun intended, I always do). A big thanks to my friend Daniel Ward for help getting started. Be sure to check out his &lt;a href=&#34;http://phandroid.com/2014/07/06/custom-android-wear-watch-faces-binary-clock/&#34;&gt;Binary Watch Face&lt;/a&gt;, which was the first Android Wear watch face to appear on Google Play a couple weeks ago.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://andydyer.org/images/wristpresenter_androidwear_next.png&#34; alt=&#34;Wrist Presenter&#34; style=&#34;width: 140px; float: right; margin-left: 10px&#34; /&gt;&lt;img src=&#34;http://andydyer.org/images/wristpresenter_androidwear.png&#34; alt=&#34;Wrist Presenter&#34; style=&#34;width: 140px; float: right; margin-left: 20px&#34; /&gt;I also released an update to &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.dandydev.wristpresenter&#34;&gt;Wrist Presenter for Android&lt;/a&gt; that adds Android Wear support. Combined with the &lt;a href=&#34;http://chrome.blogspot.com/2014/07/mirror-your-android-screen-to-tv-with.html&#34;&gt;Chromecast screen mirroring&lt;/a&gt; Google rolled out this week, the app should meet the needs of any Android-toting presenter. Way cool.&lt;/p&gt;

&lt;p&gt;The Pebble significantly reduced the need for me to pull out my phone for texts, calendar reminders, etc., but Android Wear has gone even further. How? While cooking in the kitchen, I tapped the watch screen and said &amp;ldquo;OK Google, set a timer for 10 minutes&amp;rdquo;. When the timer went off, I simply swiped it to dismiss. This also works for scheduling reminders. At the grocery store, my shopping list is on my wrist. Replying to a text message by talking to my watch makes me smile every time. And finally, I look forward to using Google Maps navigation on my watch when trying to find my way while traveling.&lt;/p&gt;

&lt;p&gt;The future is now, kids.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Presenting: Wrist Presenter for Android and the Pebble Smartwatch</title>
      <link>http://andydyer.org/blog/2014/03/07/presenting-wrist-presenter-for-android-and-the-pebble-smartwatch/</link>
      <pubDate>Fri, 07 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://andydyer.org/blog/2014/03/07/presenting-wrist-presenter-for-android-and-the-pebble-smartwatch/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://andydyer.org/images/wristpresenter_icon@2x.png&#34; alt=&#34;Wrist Presenter&#34; style=&#34;width: 150px; float: left; margin-right: 20px&#34; /&gt;
Shortly after getting a Pebble Smartwatch this past Christmas, my coworker and all-around-cool-dude &lt;a href=&#34;http://matthewmorey.com/&#34;&gt;Matthew Morey&lt;/a&gt; asked me if I&amp;rsquo;d be interested in developing the Android version of his &lt;a href=&#34;http://matthewmorey.com/wrist-presenter/&#34;&gt;Wrist Presenter iOS app&lt;/a&gt;. Luckily, he already had a rock solid Pebble app developed, so I didn&amp;rsquo;t have to flex my meager C programming skills.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://wristpresenter.com/&#34;&gt;Wrist Presenter&lt;/a&gt; turns your Pebble Smartwatch into a remote for presentations running on your Android or iOS device.&lt;/p&gt;

&lt;p&gt;The Android app connects to your Google Drive account(s) and displays a list of presentations. Selecting a presentation launches it full screen on your Android device and the companion app on the Pebble. In addition to Google Drive Presentations, raw image slides are also supported and even work without a network connection. This makes it possible to use your presentations at conferences where network connectivity is often poor to nonexistent.&lt;/p&gt;

&lt;p&gt;Chromecast support may be added in the future if Google or &lt;a href=&#34;http://www.androidpolice.com/2014/03/05/koush-updates-mirror-with-super-beta-support-for-chromecast-screen-mirroring-currently-for-rooted-nexus-5-only/&#34;&gt;Koush&lt;/a&gt; don&amp;rsquo;t enable full screen mirroring before then. At the moment, you can connect your Android device to a projector with a &lt;a href=&#34;http://www.amazon.com/gp/product/B00H2D3N0M/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=B00H2D3N0M&amp;amp;linkCode=as2&amp;amp;tag=slacod-20&#34;&gt;Miracast dongle&lt;/a&gt; or an &lt;a href=&#34;http://www.kanexlive.com/slimport&#34;&gt;HDMI adapter&lt;/a&gt; on compatible devices.&lt;/p&gt;

&lt;p&gt;I look forward to upping my &amp;ldquo;geek cred&amp;rdquo; with Wrist Presenter at conferences this year. The app is free to try and unlimited slides can be unlocked via an in-app purchase.&lt;/p&gt;

&lt;p&gt;Wrist Presenter is available on &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.dandydev.wristpresenter&#34;&gt;Google Play&lt;/a&gt; and the &lt;a href=&#34;https://itunes.apple.com/us/app/wrist-presenter-wireless-presentation/id735128848?mt=8&amp;amp;amp;at=10l6oV&amp;amp;amp;ct=mm_wrist-presenter&#34;&gt;Apple App Store&lt;/a&gt;. Download now and let us know what you think.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;div style=&#34;text-align: center&#34;&gt;
    &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.dandydev.wristpresenter&#34; title=&#34;Download Wrist Presenter Android app for free&#34;&gt;
        &lt;img alt=&#34;Get it on Google Play&#34; width=&#34;203&#34; src=&#34;http://andydyer.org/images/google_play_badge@2x.png&#34;&gt;
    &lt;/a&gt;
    &lt;a href=&#34;https://itunes.apple.com/us/app/wrist-presenter-wireless-presentation/id735128848?mt=8&amp;amp;at=10l6oV&amp;amp;ct=mm_wrist-presenter&#34; title=&#34;Download Wrist Presenter iOS app for free&#34;&gt;
        &lt;img src=&#34;http://andydyer.org/images/app_store_badge@2x.png&#34; width=&#34;203&#34; alt=&#34;Download Wrist Presenter on the App Store badge&#34;&gt;
    &lt;/a&gt;
&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing Kollektor</title>
      <link>http://andydyer.org/blog/2013/12/28/introducing-kollektor/</link>
      <pubDate>Sat, 28 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://andydyer.org/blog/2013/12/28/introducing-kollektor/</guid>
      <description>

&lt;h5 id=&#34;why-a-new-app:cec02607876d5617fbefee0c6f82b7fe&#34;&gt;Why a new app?&lt;/h5&gt;

&lt;p&gt;When I first decided to get into Android development, I created the &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.dandydev.medialibrary&#34;&gt;Music Library&lt;/a&gt; app to catalog my vinyl collection. It served me well as I learned the ins and outs of Android programming including &lt;a href=&#34;http://developer.android.com/guide/topics/providers/content-providers.html&#34;&gt;content providers&lt;/a&gt;, interacting with other applications via &lt;a href=&#34;http://developer.android.com/reference/android/content/Intent.html&#34;&gt;intents&lt;/a&gt;, working with the file system to save/load images, making API requests, etc. In order to test the workings of the Android app market, I published the ad supported Music Library Free and the paid Music Library versions of the app. In addition to not displaying ads, Music Library also included the ability to backup your collection to the device&amp;rsquo;s SD card and export data to a Google Drive spreadsheet.&lt;/p&gt;

&lt;p&gt;Both apps have seen a modest number of downloads over the past couple years. I&amp;rsquo;ve heard from people around the world who have found the apps useful, from music critics to casual collectors like myself. In addition to making it easy to catalog your record collection, Music Library included customization options such as the ability to add album art and manually add/edit release information. However, one of the most recurring feature requests was to support syncing data across devices.&lt;/p&gt;

&lt;h5 id=&#34;what-it-do:cec02607876d5617fbefee0c6f82b7fe&#34;&gt;What it do?&lt;/h5&gt;

&lt;p&gt;I initially started down the road of building my own API to manage the app&amp;rsquo;s data to facilitate the data sync. A web site would provide another way to access your collection, eventually serving as a platform for adding social features for sharing with friends. Along the way, I took a closer look at &lt;a href=&#34;http://www.discogs.com/&#34;&gt;Discogs&lt;/a&gt; and realized that in addition to providing a very large database of releases for searches, its API was also fairly mature. By re-imagining Music Library as a Discogs client, I would improve upon Music Library in the following ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enable viewing your collection on all your devices while simultaneously removing the need to support import/export/backup features.&lt;/li&gt;
&lt;li&gt;Remove the need to add/edit release information manually on the device. An artist/album title search or barcode scan make it easy to add releases to your collection. Album art, track tiles, and other details are all pulled from Discogs&amp;rsquo; user-sourced release database.&lt;/li&gt;
&lt;li&gt;Implement an in-app purchase to remove ads and support future development. Aside from being much more straightforward, it also avoids the need to have an upgrade process for transferring data from the free version to the paid version.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;open-source-shout-outs:cec02607876d5617fbefee0c6f82b7fe&#34;&gt;Open source shout-outs&lt;/h5&gt;

&lt;p&gt;Building a new app from scratch allowed me to see what a few years of experience and leveraging open source libraries could do to streamline development. I used the following libraries to build the app (many of which I&amp;rsquo;ve mentioned in &lt;a href=&#34;http://andydyer.org/blog/2013/10/11/big-android-bbq-2013-android-open-source-libraries-you-need-in-your-life/&#34;&gt;my recent Android libraries talks&lt;/a&gt;):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/events/io/sessions/325304728&#34;&gt;Volley&lt;/a&gt; - API requests and asynchronous image loading&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://code.google.com/p/google-gson/&#34;&gt;GSON&lt;/a&gt; - Parsing API JSON responses&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://greendao-orm.com/&#34;&gt;GreenDAO ORM&lt;/a&gt; - Local data storage&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fernandezpablo85/scribe-java&#34;&gt;Scribe&lt;/a&gt; - OAuth login and request signing&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://square.github.io/otto/&#34;&gt;Otto&lt;/a&gt; - Event bus, activity/fragment communication&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ManuelPeinado/FadingActionBar&#34;&gt;Fading Action Bar&lt;/a&gt; - Release detail scrolling/parallax effect&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/uservoice/uservoice-android-sdk&#34;&gt;UserVoice SDK&lt;/a&gt; - Support &amp;amp; feature requests&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;kollektor:cec02607876d5617fbefee0c6f82b7fe&#34;&gt;Kollektor&lt;/h5&gt;

&lt;p&gt;I always felt that &amp;ldquo;Music Library&amp;rdquo;, while descriptive was a bit too generic of a name for the app. I chose to name the new app &amp;ldquo;Kollektor&amp;rdquo; simply because I&amp;rsquo;m learning German and liked the funky spelling. I briefly considered &amp;ldquo;Plattensammler&amp;rdquo;, but decided it&amp;rsquo;s too long and less obvious.&lt;/p&gt;

&lt;h5 id=&#34;what-s-next:cec02607876d5617fbefee0c6f82b7fe&#34;&gt;What&amp;rsquo;s next&lt;/h5&gt;

&lt;p&gt;A quick list of potential features to be added to Kollektor:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Include other Discogs fields such as notes and reviews&lt;/li&gt;
&lt;li&gt;Album check-in/now playing sharing&lt;/li&gt;
&lt;li&gt;Sharing your collection with friends&lt;/li&gt;
&lt;li&gt;Importing collections from Music Library (this may take some time as Discogs does not support a bulk data import process and there is no direct mapping of Amazon releases to Discogs releases)&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;download:cec02607876d5617fbefee0c6f82b7fe&#34;&gt;Download&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.dandydev.kollektor&#34;&gt;Kollektor&lt;/a&gt; on Google Play&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>